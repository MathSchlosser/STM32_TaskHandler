
04_taskScheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001264  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08001394  08001394  00011394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014a4  080014a4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080014a4  080014a4  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014a4  080014a4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014a4  080014a4  000114a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014a8  080014a8  000114a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080014ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000007c  08001528  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08001528  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001482  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000003bd  00000000  00000000  00021527  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000e8  00000000  00000000  000218e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000c0  00000000  00000000  000219d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002139  00000000  00000000  00021a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000c7a  00000000  00000000  00023bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000864b  00000000  00000000  00024843  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002ce8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bd0  00000000  00000000  0002cf0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000007c 	.word	0x2000007c
 800014c:	00000000 	.word	0x00000000
 8000150:	0800137c 	.word	0x0800137c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000080 	.word	0x20000080
 800016c:	0800137c 	.word	0x0800137c

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <main>:


/*	Code implementation */

int main(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 8000184:	f001 f880 	bl	8001288 <initialise_monitor_handles>

	enable_processor_faults();
 8000188:	f000 f8ca 	bl	8000320 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 800018c:	480c      	ldr	r0, [pc, #48]	; (80001c0 <main+0x40>)
 800018e:	f000 f87b 	bl	8000288 <init_scheduler_stack>

	task_handlers[0] = (uint32_t)task1_handler;
 8000192:	4a0c      	ldr	r2, [pc, #48]	; (80001c4 <main+0x44>)
 8000194:	4b0c      	ldr	r3, [pc, #48]	; (80001c8 <main+0x48>)
 8000196:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2_handler;
 8000198:	4a0c      	ldr	r2, [pc, #48]	; (80001cc <main+0x4c>)
 800019a:	4b0b      	ldr	r3, [pc, #44]	; (80001c8 <main+0x48>)
 800019c:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3_handler;
 800019e:	4a0c      	ldr	r2, [pc, #48]	; (80001d0 <main+0x50>)
 80001a0:	4b09      	ldr	r3, [pc, #36]	; (80001c8 <main+0x48>)
 80001a2:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4_handler;
 80001a4:	4a0b      	ldr	r2, [pc, #44]	; (80001d4 <main+0x54>)
 80001a6:	4b08      	ldr	r3, [pc, #32]	; (80001c8 <main+0x48>)
 80001a8:	60da      	str	r2, [r3, #12]

	init_tasks_stack();
 80001aa:	f000 f873 	bl	8000294 <init_tasks_stack>

	init_systic_timer(TICK_HZ);
 80001ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b2:	f000 f831 	bl	8000218 <init_systic_timer>

	switch_sp_to_psp();
 80001b6:	f000 f90b 	bl	80003d0 <switch_sp_to_psp>

	task1_handler();
 80001ba:	f000 f80d 	bl	80001d8 <task1_handler>

	for(;;);
 80001be:	e7fe      	b.n	80001be <main+0x3e>
 80001c0:	20003000 	.word	0x20003000
 80001c4:	080001d9 	.word	0x080001d9
 80001c8:	20000154 	.word	0x20000154
 80001cc:	080001e9 	.word	0x080001e9
 80001d0:	080001f9 	.word	0x080001f9
 80001d4:	08000209 	.word	0x08000209

080001d8 <task1_handler>:
}

void task1_handler(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task 1.\n");
 80001dc:	4801      	ldr	r0, [pc, #4]	; (80001e4 <task1_handler+0xc>)
 80001de:	f000 fa1d 	bl	800061c <puts>
 80001e2:	e7fb      	b.n	80001dc <task1_handler+0x4>
 80001e4:	08001394 	.word	0x08001394

080001e8 <task2_handler>:
	}
}
void task2_handler(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task 2.\n");
 80001ec:	4801      	ldr	r0, [pc, #4]	; (80001f4 <task2_handler+0xc>)
 80001ee:	f000 fa15 	bl	800061c <puts>
 80001f2:	e7fb      	b.n	80001ec <task2_handler+0x4>
 80001f4:	080013a4 	.word	0x080013a4

080001f8 <task3_handler>:
	}
}
void task3_handler(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task 3.\n");
 80001fc:	4801      	ldr	r0, [pc, #4]	; (8000204 <task3_handler+0xc>)
 80001fe:	f000 fa0d 	bl	800061c <puts>
 8000202:	e7fb      	b.n	80001fc <task3_handler+0x4>
 8000204:	080013b4 	.word	0x080013b4

08000208 <task4_handler>:
	}
}
void task4_handler(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task 4.\n");
 800020c:	4801      	ldr	r0, [pc, #4]	; (8000214 <task4_handler+0xc>)
 800020e:	f000 fa05 	bl	800061c <puts>
 8000212:	e7fb      	b.n	800020c <task4_handler+0x4>
 8000214:	080013c4 	.word	0x080013c4

08000218 <init_systic_timer>:
	}
}

void init_systic_timer(uint32_t tick_hz)
{
 8000218:	b480      	push	{r7}
 800021a:	b087      	sub	sp, #28
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014; /* Pointer to SysTick Reload Value Register */
 8000220:	4b16      	ldr	r3, [pc, #88]	; (800027c <init_systic_timer+0x64>)
 8000222:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010; /*	Pointer to SysTick Control and Status Register */
 8000224:	4b16      	ldr	r3, [pc, #88]	; (8000280 <init_systic_timer+0x68>)
 8000226:	613b      	str	r3, [r7, #16]

	uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz) - 1; /* n-1 because the exception will be triggered when the current value register reload the value in SRVR */
 8000228:	4a16      	ldr	r2, [pc, #88]	; (8000284 <init_systic_timer+0x6c>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000230:	3b01      	subs	r3, #1
 8000232:	60fb      	str	r3, [r7, #12]

	/*	Clear the value in SVR */
	*pSRVR &= ~(0x00FFFFFF);
 8000234:	697b      	ldr	r3, [r7, #20]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800023c:	697b      	ldr	r3, [r7, #20]
 800023e:	601a      	str	r2, [r3, #0]

	/*	Load the value in SVR */
	*pSRVR |= count_value;
 8000240:	697b      	ldr	r3, [r7, #20]
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	431a      	orrs	r2, r3
 8000248:	697b      	ldr	r3, [r7, #20]
 800024a:	601a      	str	r2, [r3, #0]

	/*	Settings */
	*pSCSR |= (1 << 2); /*	Clock source -> internal */
 800024c:	693b      	ldr	r3, [r7, #16]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f043 0204 	orr.w	r2, r3, #4
 8000254:	693b      	ldr	r3, [r7, #16]
 8000256:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 1); /*	Enable systick exception request */
 8000258:	693b      	ldr	r3, [r7, #16]
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f043 0202 	orr.w	r2, r3, #2
 8000260:	693b      	ldr	r3, [r7, #16]
 8000262:	601a      	str	r2, [r3, #0]

	/*	Enable systick */
	*pSCSR |= (1 << 0); /*	Enable systick */
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	f043 0201 	orr.w	r2, r3, #1
 800026c:	693b      	ldr	r3, [r7, #16]
 800026e:	601a      	str	r2, [r3, #0]
}
 8000270:	bf00      	nop
 8000272:	371c      	adds	r7, #28
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	e000e014 	.word	0xe000e014
 8000280:	e000e010 	.word	0xe000e010
 8000284:	007a1200 	.word	0x007a1200

08000288 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 8000288:	4603      	mov	r3, r0
	__asm volatile ("MSR MSP, %0"::"r"(sched_top_of_stack):);
 800028a:	f383 8808 	msr	MSP, r3
	__asm volatile ("BX LR");
 800028e:	4770      	bx	lr
}
 8000290:	bf00      	nop
	...

08000294 <init_tasks_stack>:



void init_tasks_stack(void)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
	uint32_t *pPSP;

	for(int i = 0; i < MAX_TASKS; i++ )
 800029a:	2300      	movs	r3, #0
 800029c:	60bb      	str	r3, [r7, #8]
 800029e:	e032      	b.n	8000306 <init_tasks_stack+0x72>
	{
		pPSP = (uint32_t*)psp_of_tasks[i];
 80002a0:	4a1d      	ldr	r2, [pc, #116]	; (8000318 <init_tasks_stack+0x84>)
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a8:	60fb      	str	r3, [r7, #12]

		pPSP--; /* Decrements because in ARM-M stack is full descendant */
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	3b04      	subs	r3, #4
 80002ae:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002b6:	601a      	str	r2, [r3, #0]

		pPSP--; /* PC */
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	3b04      	subs	r3, #4
 80002bc:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 80002be:	4a17      	ldr	r2, [pc, #92]	; (800031c <init_tasks_stack+0x88>)
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	601a      	str	r2, [r3, #0]

		pPSP--; /* LR */
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	3b04      	subs	r3, #4
 80002ce:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	f06f 0202 	mvn.w	r2, #2
 80002d6:	601a      	str	r2, [r3, #0]

		for(int j = 0; j < 13; j++)
 80002d8:	2300      	movs	r3, #0
 80002da:	607b      	str	r3, [r7, #4]
 80002dc:	e008      	b.n	80002f0 <init_tasks_stack+0x5c>
		{
			pPSP--;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	3b04      	subs	r3, #4
 80002e2:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 13; j++)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	3301      	adds	r3, #1
 80002ee:	607b      	str	r3, [r7, #4]
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2b0c      	cmp	r3, #12
 80002f4:	ddf3      	ble.n	80002de <init_tasks_stack+0x4a>
		}

		psp_of_tasks[i] = (uint32_t)pPSP;
 80002f6:	68fa      	ldr	r2, [r7, #12]
 80002f8:	4907      	ldr	r1, [pc, #28]	; (8000318 <init_tasks_stack+0x84>)
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < MAX_TASKS; i++ )
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	3301      	adds	r3, #1
 8000304:	60bb      	str	r3, [r7, #8]
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	2b03      	cmp	r3, #3
 800030a:	d9c9      	bls.n	80002a0 <init_tasks_stack+0xc>

	}

}
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	20000000 	.word	0x20000000
 800031c:	20000154 	.word	0x20000154

08000320 <enable_processor_faults>:

void enable_processor_faults(void)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 8000326:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <enable_processor_faults+0x38>)
 8000328:	607b      	str	r3, [r7, #4]

	*pSHCSR |= ( 1 << 16 ); /* Memory manage */
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17 ); /* Bus fault */
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18 ); /* Usage fault */
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	601a      	str	r2, [r3, #0]

}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	e000ed24 	.word	0xe000ed24

0800035c <get_psp_value>:


uint32_t get_psp_value(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0

	return psp_of_tasks[current_task];
 8000360:	4b04      	ldr	r3, [pc, #16]	; (8000374 <get_psp_value+0x18>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	461a      	mov	r2, r3
 8000366:	4b04      	ldr	r3, [pc, #16]	; (8000378 <get_psp_value+0x1c>)
 8000368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 800036c:	4618      	mov	r0, r3
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr
 8000374:	20000098 	.word	0x20000098
 8000378:	20000000 	.word	0x20000000

0800037c <save_psp_value>:

void save_psp_value(uint32_t current_psp_value)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	psp_of_tasks[current_task] = current_psp_value;
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <save_psp_value+0x20>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	4619      	mov	r1, r3
 800038a:	4a05      	ldr	r2, [pc, #20]	; (80003a0 <save_psp_value+0x24>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr
 800039c:	20000098 	.word	0x20000098
 80003a0:	20000000 	.word	0x20000000

080003a4 <update_next_task>:

void update_next_task(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
	current_task++;
 80003a8:	4b08      	ldr	r3, [pc, #32]	; (80003cc <update_next_task+0x28>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	3301      	adds	r3, #1
 80003ae:	b2da      	uxtb	r2, r3
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <update_next_task+0x28>)
 80003b2:	701a      	strb	r2, [r3, #0]
	current_task = current_task % MAX_TASKS;
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <update_next_task+0x28>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	f003 0303 	and.w	r3, r3, #3
 80003bc:	b2da      	uxtb	r2, r3
 80003be:	4b03      	ldr	r3, [pc, #12]	; (80003cc <update_next_task+0x28>)
 80003c0:	701a      	strb	r2, [r3, #0]
}
 80003c2:	bf00      	nop
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	20000098 	.word	0x20000098

080003d0 <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void)
{
	/*	Initialize the PSP with TASK1 stack start address */
	__asm volatile ("PUSH {LR}"); /* Preserve LR connecting back to main function */
 80003d0:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value"); /* Get PSP from get_psp_value function */
 80003d2:	f7ff ffc3 	bl	800035c <get_psp_value>
	__asm volatile ("MSR PSP, R0"); /* Initialize PSP */
 80003d6:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}"); /* Retrieve LR value which was saved in PUSH instruction */
 80003da:	f85d eb04 	ldr.w	lr, [sp], #4

	/*	Change SP to PSP using control register */
	__asm volatile ("MOV R0, #0x02");
 80003de:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL, R0");
 80003e2:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 80003e6:	4770      	bx	lr
}
 80003e8:	bf00      	nop

080003ea <SysTick_Handler>:

__attribute__((naked)) void SysTick_Handler (void)
{
	/*	Save the context of current task */
	__asm volatile ("MRS R0, PSP");
 80003ea:	f3ef 8009 	mrs	r0, PSP

	/*	Store multiple registers and decrement the pointer STMDB */
	__asm volatile ("STMDB R0!, {R4 - R11}");/*	Using PSP value, store in SF2 Registers R4 - R11 */
 80003ee:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile ("PUSH {LR}");
 80003f2:	b500      	push	{lr}

	__asm volatile ("BL save_psp_value");/*	Save the current value of PSP */
 80003f4:	f7ff ffc2 	bl	800037c <save_psp_value>

	/*	Retrieve the context of current task */
	__asm volatile ("BL update_next_task");/* Decide next task to run */
 80003f8:	f7ff ffd4 	bl	80003a4 <update_next_task>
	__asm volatile ("BL get_psp_value");/* Gets PSP past value */
 80003fc:	f7ff ffae 	bl	800035c <get_psp_value>

	/*	Load multiple registers and increment the pointer LDMIA */
	__asm volatile ("LDMIA R0!, {R4-R11} ");/* Using PSP value, retrieve from SF2 Registers R4 - R11 */
 8000400:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile ("MSR PSP, R0"); /* Update PSP and exit */
 8000404:	f380 8809 	msr	PSP, r0

	__asm volatile ("POP {LR}");
 8000408:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile ("BX LR");
 800040c:	4770      	bx	lr
}
 800040e:	bf00      	nop

08000410 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	printf("Exception  :  HardFault.\n");
 8000414:	4801      	ldr	r0, [pc, #4]	; (800041c <HardFault_Handler+0xc>)
 8000416:	f000 f901 	bl	800061c <puts>
	while(1);
 800041a:	e7fe      	b.n	800041a <HardFault_Handler+0xa>
 800041c:	080013d4 	.word	0x080013d4

08000420 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	printf("Exception  :  MemManage.\n");
 8000424:	4801      	ldr	r0, [pc, #4]	; (800042c <MemManage_Handler+0xc>)
 8000426:	f000 f8f9 	bl	800061c <puts>
	while(1);
 800042a:	e7fe      	b.n	800042a <MemManage_Handler+0xa>
 800042c:	080013f0 	.word	0x080013f0

08000430 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	printf("Exception  :  BusFault.\n");
 8000434:	4801      	ldr	r0, [pc, #4]	; (800043c <BusFault_Handler+0xc>)
 8000436:	f000 f8f1 	bl	800061c <puts>
	while(1);
 800043a:	e7fe      	b.n	800043a <BusFault_Handler+0xa>
 800043c:	0800140c 	.word	0x0800140c

08000440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000448:	4a14      	ldr	r2, [pc, #80]	; (800049c <_sbrk+0x5c>)
 800044a:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <_sbrk+0x60>)
 800044c:	1ad3      	subs	r3, r2, r3
 800044e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000454:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <_sbrk+0x64>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d102      	bne.n	8000462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800045c:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <_sbrk+0x64>)
 800045e:	4a12      	ldr	r2, [pc, #72]	; (80004a8 <_sbrk+0x68>)
 8000460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000462:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <_sbrk+0x64>)
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4413      	add	r3, r2
 800046a:	693a      	ldr	r2, [r7, #16]
 800046c:	429a      	cmp	r2, r3
 800046e:	d207      	bcs.n	8000480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000470:	f000 f846 	bl	8000500 <__errno>
 8000474:	4602      	mov	r2, r0
 8000476:	230c      	movs	r3, #12
 8000478:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800047a:	f04f 33ff 	mov.w	r3, #4294967295
 800047e:	e009      	b.n	8000494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <_sbrk+0x64>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000486:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <_sbrk+0x64>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4413      	add	r3, r2
 800048e:	4a05      	ldr	r2, [pc, #20]	; (80004a4 <_sbrk+0x64>)
 8000490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000492:	68fb      	ldr	r3, [r7, #12]
}
 8000494:	4618      	mov	r0, r3
 8000496:	3718      	adds	r7, #24
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20005000 	.word	0x20005000
 80004a0:	00000400 	.word	0x00000400
 80004a4:	2000009c 	.word	0x2000009c
 80004a8:	20000168 	.word	0x20000168

080004ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004ac:	480d      	ldr	r0, [pc, #52]	; (80004e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ae:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b4:	480c      	ldr	r0, [pc, #48]	; (80004e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004b6:	490d      	ldr	r1, [pc, #52]	; (80004ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80004b8:	4a0d      	ldr	r2, [pc, #52]	; (80004f0 <LoopForever+0xe>)
  movs r3, #0
 80004ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004bc:	e002      	b.n	80004c4 <LoopCopyDataInit>

080004be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004c2:	3304      	adds	r3, #4

080004c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c8:	d3f9      	bcc.n	80004be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ca:	4a0a      	ldr	r2, [pc, #40]	; (80004f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004cc:	4c0a      	ldr	r4, [pc, #40]	; (80004f8 <LoopForever+0x16>)
  movs r3, #0
 80004ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d0:	e001      	b.n	80004d6 <LoopFillZerobss>

080004d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d4:	3204      	adds	r2, #4

080004d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d8:	d3fb      	bcc.n	80004d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004da:	f000 f817 	bl	800050c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004de:	f7ff fe4f 	bl	8000180 <main>

080004e2 <LoopForever>:

LoopForever:
    b LoopForever
 80004e2:	e7fe      	b.n	80004e2 <LoopForever>
  ldr   r0, =_estack
 80004e4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80004e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004ec:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80004f0:	080014ac 	.word	0x080014ac
  ldr r2, =_sbss
 80004f4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80004f8:	20000168 	.word	0x20000168

080004fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004fc:	e7fe      	b.n	80004fc <ADC1_2_IRQHandler>
	...

08000500 <__errno>:
 8000500:	4b01      	ldr	r3, [pc, #4]	; (8000508 <__errno+0x8>)
 8000502:	6818      	ldr	r0, [r3, #0]
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000010 	.word	0x20000010

0800050c <__libc_init_array>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	2500      	movs	r5, #0
 8000510:	4e0c      	ldr	r6, [pc, #48]	; (8000544 <__libc_init_array+0x38>)
 8000512:	4c0d      	ldr	r4, [pc, #52]	; (8000548 <__libc_init_array+0x3c>)
 8000514:	1ba4      	subs	r4, r4, r6
 8000516:	10a4      	asrs	r4, r4, #2
 8000518:	42a5      	cmp	r5, r4
 800051a:	d109      	bne.n	8000530 <__libc_init_array+0x24>
 800051c:	f000 ff2e 	bl	800137c <_init>
 8000520:	2500      	movs	r5, #0
 8000522:	4e0a      	ldr	r6, [pc, #40]	; (800054c <__libc_init_array+0x40>)
 8000524:	4c0a      	ldr	r4, [pc, #40]	; (8000550 <__libc_init_array+0x44>)
 8000526:	1ba4      	subs	r4, r4, r6
 8000528:	10a4      	asrs	r4, r4, #2
 800052a:	42a5      	cmp	r5, r4
 800052c:	d105      	bne.n	800053a <__libc_init_array+0x2e>
 800052e:	bd70      	pop	{r4, r5, r6, pc}
 8000530:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000534:	4798      	blx	r3
 8000536:	3501      	adds	r5, #1
 8000538:	e7ee      	b.n	8000518 <__libc_init_array+0xc>
 800053a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800053e:	4798      	blx	r3
 8000540:	3501      	adds	r5, #1
 8000542:	e7f2      	b.n	800052a <__libc_init_array+0x1e>
 8000544:	080014a4 	.word	0x080014a4
 8000548:	080014a4 	.word	0x080014a4
 800054c:	080014a4 	.word	0x080014a4
 8000550:	080014a8 	.word	0x080014a8

08000554 <memset>:
 8000554:	4603      	mov	r3, r0
 8000556:	4402      	add	r2, r0
 8000558:	4293      	cmp	r3, r2
 800055a:	d100      	bne.n	800055e <memset+0xa>
 800055c:	4770      	bx	lr
 800055e:	f803 1b01 	strb.w	r1, [r3], #1
 8000562:	e7f9      	b.n	8000558 <memset+0x4>

08000564 <_puts_r>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	460e      	mov	r6, r1
 8000568:	4605      	mov	r5, r0
 800056a:	b118      	cbz	r0, 8000574 <_puts_r+0x10>
 800056c:	6983      	ldr	r3, [r0, #24]
 800056e:	b90b      	cbnz	r3, 8000574 <_puts_r+0x10>
 8000570:	f000 fa0c 	bl	800098c <__sinit>
 8000574:	69ab      	ldr	r3, [r5, #24]
 8000576:	68ac      	ldr	r4, [r5, #8]
 8000578:	b913      	cbnz	r3, 8000580 <_puts_r+0x1c>
 800057a:	4628      	mov	r0, r5
 800057c:	f000 fa06 	bl	800098c <__sinit>
 8000580:	4b23      	ldr	r3, [pc, #140]	; (8000610 <_puts_r+0xac>)
 8000582:	429c      	cmp	r4, r3
 8000584:	d117      	bne.n	80005b6 <_puts_r+0x52>
 8000586:	686c      	ldr	r4, [r5, #4]
 8000588:	89a3      	ldrh	r3, [r4, #12]
 800058a:	071b      	lsls	r3, r3, #28
 800058c:	d51d      	bpl.n	80005ca <_puts_r+0x66>
 800058e:	6923      	ldr	r3, [r4, #16]
 8000590:	b1db      	cbz	r3, 80005ca <_puts_r+0x66>
 8000592:	3e01      	subs	r6, #1
 8000594:	68a3      	ldr	r3, [r4, #8]
 8000596:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800059a:	3b01      	subs	r3, #1
 800059c:	60a3      	str	r3, [r4, #8]
 800059e:	b9e9      	cbnz	r1, 80005dc <_puts_r+0x78>
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	da2e      	bge.n	8000602 <_puts_r+0x9e>
 80005a4:	4622      	mov	r2, r4
 80005a6:	210a      	movs	r1, #10
 80005a8:	4628      	mov	r0, r5
 80005aa:	f000 f83f 	bl	800062c <__swbuf_r>
 80005ae:	3001      	adds	r0, #1
 80005b0:	d011      	beq.n	80005d6 <_puts_r+0x72>
 80005b2:	200a      	movs	r0, #10
 80005b4:	e011      	b.n	80005da <_puts_r+0x76>
 80005b6:	4b17      	ldr	r3, [pc, #92]	; (8000614 <_puts_r+0xb0>)
 80005b8:	429c      	cmp	r4, r3
 80005ba:	d101      	bne.n	80005c0 <_puts_r+0x5c>
 80005bc:	68ac      	ldr	r4, [r5, #8]
 80005be:	e7e3      	b.n	8000588 <_puts_r+0x24>
 80005c0:	4b15      	ldr	r3, [pc, #84]	; (8000618 <_puts_r+0xb4>)
 80005c2:	429c      	cmp	r4, r3
 80005c4:	bf08      	it	eq
 80005c6:	68ec      	ldreq	r4, [r5, #12]
 80005c8:	e7de      	b.n	8000588 <_puts_r+0x24>
 80005ca:	4621      	mov	r1, r4
 80005cc:	4628      	mov	r0, r5
 80005ce:	f000 f87f 	bl	80006d0 <__swsetup_r>
 80005d2:	2800      	cmp	r0, #0
 80005d4:	d0dd      	beq.n	8000592 <_puts_r+0x2e>
 80005d6:	f04f 30ff 	mov.w	r0, #4294967295
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	2b00      	cmp	r3, #0
 80005de:	da04      	bge.n	80005ea <_puts_r+0x86>
 80005e0:	69a2      	ldr	r2, [r4, #24]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	dc06      	bgt.n	80005f4 <_puts_r+0x90>
 80005e6:	290a      	cmp	r1, #10
 80005e8:	d004      	beq.n	80005f4 <_puts_r+0x90>
 80005ea:	6823      	ldr	r3, [r4, #0]
 80005ec:	1c5a      	adds	r2, r3, #1
 80005ee:	6022      	str	r2, [r4, #0]
 80005f0:	7019      	strb	r1, [r3, #0]
 80005f2:	e7cf      	b.n	8000594 <_puts_r+0x30>
 80005f4:	4622      	mov	r2, r4
 80005f6:	4628      	mov	r0, r5
 80005f8:	f000 f818 	bl	800062c <__swbuf_r>
 80005fc:	3001      	adds	r0, #1
 80005fe:	d1c9      	bne.n	8000594 <_puts_r+0x30>
 8000600:	e7e9      	b.n	80005d6 <_puts_r+0x72>
 8000602:	200a      	movs	r0, #10
 8000604:	6823      	ldr	r3, [r4, #0]
 8000606:	1c5a      	adds	r2, r3, #1
 8000608:	6022      	str	r2, [r4, #0]
 800060a:	7018      	strb	r0, [r3, #0]
 800060c:	e7e5      	b.n	80005da <_puts_r+0x76>
 800060e:	bf00      	nop
 8000610:	08001448 	.word	0x08001448
 8000614:	08001468 	.word	0x08001468
 8000618:	08001428 	.word	0x08001428

0800061c <puts>:
 800061c:	4b02      	ldr	r3, [pc, #8]	; (8000628 <puts+0xc>)
 800061e:	4601      	mov	r1, r0
 8000620:	6818      	ldr	r0, [r3, #0]
 8000622:	f7ff bf9f 	b.w	8000564 <_puts_r>
 8000626:	bf00      	nop
 8000628:	20000010 	.word	0x20000010

0800062c <__swbuf_r>:
 800062c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062e:	460e      	mov	r6, r1
 8000630:	4614      	mov	r4, r2
 8000632:	4605      	mov	r5, r0
 8000634:	b118      	cbz	r0, 800063e <__swbuf_r+0x12>
 8000636:	6983      	ldr	r3, [r0, #24]
 8000638:	b90b      	cbnz	r3, 800063e <__swbuf_r+0x12>
 800063a:	f000 f9a7 	bl	800098c <__sinit>
 800063e:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <__swbuf_r+0x98>)
 8000640:	429c      	cmp	r4, r3
 8000642:	d12a      	bne.n	800069a <__swbuf_r+0x6e>
 8000644:	686c      	ldr	r4, [r5, #4]
 8000646:	69a3      	ldr	r3, [r4, #24]
 8000648:	60a3      	str	r3, [r4, #8]
 800064a:	89a3      	ldrh	r3, [r4, #12]
 800064c:	071a      	lsls	r2, r3, #28
 800064e:	d52e      	bpl.n	80006ae <__swbuf_r+0x82>
 8000650:	6923      	ldr	r3, [r4, #16]
 8000652:	b363      	cbz	r3, 80006ae <__swbuf_r+0x82>
 8000654:	6923      	ldr	r3, [r4, #16]
 8000656:	6820      	ldr	r0, [r4, #0]
 8000658:	b2f6      	uxtb	r6, r6
 800065a:	1ac0      	subs	r0, r0, r3
 800065c:	6963      	ldr	r3, [r4, #20]
 800065e:	4637      	mov	r7, r6
 8000660:	4283      	cmp	r3, r0
 8000662:	dc04      	bgt.n	800066e <__swbuf_r+0x42>
 8000664:	4621      	mov	r1, r4
 8000666:	4628      	mov	r0, r5
 8000668:	f000 f926 	bl	80008b8 <_fflush_r>
 800066c:	bb28      	cbnz	r0, 80006ba <__swbuf_r+0x8e>
 800066e:	68a3      	ldr	r3, [r4, #8]
 8000670:	3001      	adds	r0, #1
 8000672:	3b01      	subs	r3, #1
 8000674:	60a3      	str	r3, [r4, #8]
 8000676:	6823      	ldr	r3, [r4, #0]
 8000678:	1c5a      	adds	r2, r3, #1
 800067a:	6022      	str	r2, [r4, #0]
 800067c:	701e      	strb	r6, [r3, #0]
 800067e:	6963      	ldr	r3, [r4, #20]
 8000680:	4283      	cmp	r3, r0
 8000682:	d004      	beq.n	800068e <__swbuf_r+0x62>
 8000684:	89a3      	ldrh	r3, [r4, #12]
 8000686:	07db      	lsls	r3, r3, #31
 8000688:	d519      	bpl.n	80006be <__swbuf_r+0x92>
 800068a:	2e0a      	cmp	r6, #10
 800068c:	d117      	bne.n	80006be <__swbuf_r+0x92>
 800068e:	4621      	mov	r1, r4
 8000690:	4628      	mov	r0, r5
 8000692:	f000 f911 	bl	80008b8 <_fflush_r>
 8000696:	b190      	cbz	r0, 80006be <__swbuf_r+0x92>
 8000698:	e00f      	b.n	80006ba <__swbuf_r+0x8e>
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <__swbuf_r+0x9c>)
 800069c:	429c      	cmp	r4, r3
 800069e:	d101      	bne.n	80006a4 <__swbuf_r+0x78>
 80006a0:	68ac      	ldr	r4, [r5, #8]
 80006a2:	e7d0      	b.n	8000646 <__swbuf_r+0x1a>
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <__swbuf_r+0xa0>)
 80006a6:	429c      	cmp	r4, r3
 80006a8:	bf08      	it	eq
 80006aa:	68ec      	ldreq	r4, [r5, #12]
 80006ac:	e7cb      	b.n	8000646 <__swbuf_r+0x1a>
 80006ae:	4621      	mov	r1, r4
 80006b0:	4628      	mov	r0, r5
 80006b2:	f000 f80d 	bl	80006d0 <__swsetup_r>
 80006b6:	2800      	cmp	r0, #0
 80006b8:	d0cc      	beq.n	8000654 <__swbuf_r+0x28>
 80006ba:	f04f 37ff 	mov.w	r7, #4294967295
 80006be:	4638      	mov	r0, r7
 80006c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006c2:	bf00      	nop
 80006c4:	08001448 	.word	0x08001448
 80006c8:	08001468 	.word	0x08001468
 80006cc:	08001428 	.word	0x08001428

080006d0 <__swsetup_r>:
 80006d0:	4b32      	ldr	r3, [pc, #200]	; (800079c <__swsetup_r+0xcc>)
 80006d2:	b570      	push	{r4, r5, r6, lr}
 80006d4:	681d      	ldr	r5, [r3, #0]
 80006d6:	4606      	mov	r6, r0
 80006d8:	460c      	mov	r4, r1
 80006da:	b125      	cbz	r5, 80006e6 <__swsetup_r+0x16>
 80006dc:	69ab      	ldr	r3, [r5, #24]
 80006de:	b913      	cbnz	r3, 80006e6 <__swsetup_r+0x16>
 80006e0:	4628      	mov	r0, r5
 80006e2:	f000 f953 	bl	800098c <__sinit>
 80006e6:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <__swsetup_r+0xd0>)
 80006e8:	429c      	cmp	r4, r3
 80006ea:	d10f      	bne.n	800070c <__swsetup_r+0x3c>
 80006ec:	686c      	ldr	r4, [r5, #4]
 80006ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	0715      	lsls	r5, r2, #28
 80006f6:	d42c      	bmi.n	8000752 <__swsetup_r+0x82>
 80006f8:	06d0      	lsls	r0, r2, #27
 80006fa:	d411      	bmi.n	8000720 <__swsetup_r+0x50>
 80006fc:	2209      	movs	r2, #9
 80006fe:	6032      	str	r2, [r6, #0]
 8000700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000704:	81a3      	strh	r3, [r4, #12]
 8000706:	f04f 30ff 	mov.w	r0, #4294967295
 800070a:	e03e      	b.n	800078a <__swsetup_r+0xba>
 800070c:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <__swsetup_r+0xd4>)
 800070e:	429c      	cmp	r4, r3
 8000710:	d101      	bne.n	8000716 <__swsetup_r+0x46>
 8000712:	68ac      	ldr	r4, [r5, #8]
 8000714:	e7eb      	b.n	80006ee <__swsetup_r+0x1e>
 8000716:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <__swsetup_r+0xd8>)
 8000718:	429c      	cmp	r4, r3
 800071a:	bf08      	it	eq
 800071c:	68ec      	ldreq	r4, [r5, #12]
 800071e:	e7e6      	b.n	80006ee <__swsetup_r+0x1e>
 8000720:	0751      	lsls	r1, r2, #29
 8000722:	d512      	bpl.n	800074a <__swsetup_r+0x7a>
 8000724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000726:	b141      	cbz	r1, 800073a <__swsetup_r+0x6a>
 8000728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800072c:	4299      	cmp	r1, r3
 800072e:	d002      	beq.n	8000736 <__swsetup_r+0x66>
 8000730:	4630      	mov	r0, r6
 8000732:	f000 fa19 	bl	8000b68 <_free_r>
 8000736:	2300      	movs	r3, #0
 8000738:	6363      	str	r3, [r4, #52]	; 0x34
 800073a:	89a3      	ldrh	r3, [r4, #12]
 800073c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000740:	81a3      	strh	r3, [r4, #12]
 8000742:	2300      	movs	r3, #0
 8000744:	6063      	str	r3, [r4, #4]
 8000746:	6923      	ldr	r3, [r4, #16]
 8000748:	6023      	str	r3, [r4, #0]
 800074a:	89a3      	ldrh	r3, [r4, #12]
 800074c:	f043 0308 	orr.w	r3, r3, #8
 8000750:	81a3      	strh	r3, [r4, #12]
 8000752:	6923      	ldr	r3, [r4, #16]
 8000754:	b94b      	cbnz	r3, 800076a <__swsetup_r+0x9a>
 8000756:	89a3      	ldrh	r3, [r4, #12]
 8000758:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800075c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000760:	d003      	beq.n	800076a <__swsetup_r+0x9a>
 8000762:	4621      	mov	r1, r4
 8000764:	4630      	mov	r0, r6
 8000766:	f000 f9bf 	bl	8000ae8 <__smakebuf_r>
 800076a:	89a2      	ldrh	r2, [r4, #12]
 800076c:	f012 0301 	ands.w	r3, r2, #1
 8000770:	d00c      	beq.n	800078c <__swsetup_r+0xbc>
 8000772:	2300      	movs	r3, #0
 8000774:	60a3      	str	r3, [r4, #8]
 8000776:	6963      	ldr	r3, [r4, #20]
 8000778:	425b      	negs	r3, r3
 800077a:	61a3      	str	r3, [r4, #24]
 800077c:	6923      	ldr	r3, [r4, #16]
 800077e:	b953      	cbnz	r3, 8000796 <__swsetup_r+0xc6>
 8000780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000784:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000788:	d1ba      	bne.n	8000700 <__swsetup_r+0x30>
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	0792      	lsls	r2, r2, #30
 800078e:	bf58      	it	pl
 8000790:	6963      	ldrpl	r3, [r4, #20]
 8000792:	60a3      	str	r3, [r4, #8]
 8000794:	e7f2      	b.n	800077c <__swsetup_r+0xac>
 8000796:	2000      	movs	r0, #0
 8000798:	e7f7      	b.n	800078a <__swsetup_r+0xba>
 800079a:	bf00      	nop
 800079c:	20000010 	.word	0x20000010
 80007a0:	08001448 	.word	0x08001448
 80007a4:	08001468 	.word	0x08001468
 80007a8:	08001428 	.word	0x08001428

080007ac <__sflush_r>:
 80007ac:	898a      	ldrh	r2, [r1, #12]
 80007ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007b2:	4605      	mov	r5, r0
 80007b4:	0710      	lsls	r0, r2, #28
 80007b6:	460c      	mov	r4, r1
 80007b8:	d458      	bmi.n	800086c <__sflush_r+0xc0>
 80007ba:	684b      	ldr	r3, [r1, #4]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dc05      	bgt.n	80007cc <__sflush_r+0x20>
 80007c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	dc02      	bgt.n	80007cc <__sflush_r+0x20>
 80007c6:	2000      	movs	r0, #0
 80007c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d0f9      	beq.n	80007c6 <__sflush_r+0x1a>
 80007d2:	2300      	movs	r3, #0
 80007d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80007d8:	682f      	ldr	r7, [r5, #0]
 80007da:	6a21      	ldr	r1, [r4, #32]
 80007dc:	602b      	str	r3, [r5, #0]
 80007de:	d032      	beq.n	8000846 <__sflush_r+0x9a>
 80007e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80007e2:	89a3      	ldrh	r3, [r4, #12]
 80007e4:	075a      	lsls	r2, r3, #29
 80007e6:	d505      	bpl.n	80007f4 <__sflush_r+0x48>
 80007e8:	6863      	ldr	r3, [r4, #4]
 80007ea:	1ac0      	subs	r0, r0, r3
 80007ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007ee:	b10b      	cbz	r3, 80007f4 <__sflush_r+0x48>
 80007f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007f2:	1ac0      	subs	r0, r0, r3
 80007f4:	2300      	movs	r3, #0
 80007f6:	4602      	mov	r2, r0
 80007f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80007fa:	6a21      	ldr	r1, [r4, #32]
 80007fc:	4628      	mov	r0, r5
 80007fe:	47b0      	blx	r6
 8000800:	1c43      	adds	r3, r0, #1
 8000802:	89a3      	ldrh	r3, [r4, #12]
 8000804:	d106      	bne.n	8000814 <__sflush_r+0x68>
 8000806:	6829      	ldr	r1, [r5, #0]
 8000808:	291d      	cmp	r1, #29
 800080a:	d848      	bhi.n	800089e <__sflush_r+0xf2>
 800080c:	4a29      	ldr	r2, [pc, #164]	; (80008b4 <__sflush_r+0x108>)
 800080e:	40ca      	lsrs	r2, r1
 8000810:	07d6      	lsls	r6, r2, #31
 8000812:	d544      	bpl.n	800089e <__sflush_r+0xf2>
 8000814:	2200      	movs	r2, #0
 8000816:	6062      	str	r2, [r4, #4]
 8000818:	6922      	ldr	r2, [r4, #16]
 800081a:	04d9      	lsls	r1, r3, #19
 800081c:	6022      	str	r2, [r4, #0]
 800081e:	d504      	bpl.n	800082a <__sflush_r+0x7e>
 8000820:	1c42      	adds	r2, r0, #1
 8000822:	d101      	bne.n	8000828 <__sflush_r+0x7c>
 8000824:	682b      	ldr	r3, [r5, #0]
 8000826:	b903      	cbnz	r3, 800082a <__sflush_r+0x7e>
 8000828:	6560      	str	r0, [r4, #84]	; 0x54
 800082a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800082c:	602f      	str	r7, [r5, #0]
 800082e:	2900      	cmp	r1, #0
 8000830:	d0c9      	beq.n	80007c6 <__sflush_r+0x1a>
 8000832:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000836:	4299      	cmp	r1, r3
 8000838:	d002      	beq.n	8000840 <__sflush_r+0x94>
 800083a:	4628      	mov	r0, r5
 800083c:	f000 f994 	bl	8000b68 <_free_r>
 8000840:	2000      	movs	r0, #0
 8000842:	6360      	str	r0, [r4, #52]	; 0x34
 8000844:	e7c0      	b.n	80007c8 <__sflush_r+0x1c>
 8000846:	2301      	movs	r3, #1
 8000848:	4628      	mov	r0, r5
 800084a:	47b0      	blx	r6
 800084c:	1c41      	adds	r1, r0, #1
 800084e:	d1c8      	bne.n	80007e2 <__sflush_r+0x36>
 8000850:	682b      	ldr	r3, [r5, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0c5      	beq.n	80007e2 <__sflush_r+0x36>
 8000856:	2b1d      	cmp	r3, #29
 8000858:	d001      	beq.n	800085e <__sflush_r+0xb2>
 800085a:	2b16      	cmp	r3, #22
 800085c:	d101      	bne.n	8000862 <__sflush_r+0xb6>
 800085e:	602f      	str	r7, [r5, #0]
 8000860:	e7b1      	b.n	80007c6 <__sflush_r+0x1a>
 8000862:	89a3      	ldrh	r3, [r4, #12]
 8000864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000868:	81a3      	strh	r3, [r4, #12]
 800086a:	e7ad      	b.n	80007c8 <__sflush_r+0x1c>
 800086c:	690f      	ldr	r7, [r1, #16]
 800086e:	2f00      	cmp	r7, #0
 8000870:	d0a9      	beq.n	80007c6 <__sflush_r+0x1a>
 8000872:	0793      	lsls	r3, r2, #30
 8000874:	bf18      	it	ne
 8000876:	2300      	movne	r3, #0
 8000878:	680e      	ldr	r6, [r1, #0]
 800087a:	bf08      	it	eq
 800087c:	694b      	ldreq	r3, [r1, #20]
 800087e:	eba6 0807 	sub.w	r8, r6, r7
 8000882:	600f      	str	r7, [r1, #0]
 8000884:	608b      	str	r3, [r1, #8]
 8000886:	f1b8 0f00 	cmp.w	r8, #0
 800088a:	dd9c      	ble.n	80007c6 <__sflush_r+0x1a>
 800088c:	4643      	mov	r3, r8
 800088e:	463a      	mov	r2, r7
 8000890:	6a21      	ldr	r1, [r4, #32]
 8000892:	4628      	mov	r0, r5
 8000894:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000896:	47b0      	blx	r6
 8000898:	2800      	cmp	r0, #0
 800089a:	dc06      	bgt.n	80008aa <__sflush_r+0xfe>
 800089c:	89a3      	ldrh	r3, [r4, #12]
 800089e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a2:	81a3      	strh	r3, [r4, #12]
 80008a4:	f04f 30ff 	mov.w	r0, #4294967295
 80008a8:	e78e      	b.n	80007c8 <__sflush_r+0x1c>
 80008aa:	4407      	add	r7, r0
 80008ac:	eba8 0800 	sub.w	r8, r8, r0
 80008b0:	e7e9      	b.n	8000886 <__sflush_r+0xda>
 80008b2:	bf00      	nop
 80008b4:	20400001 	.word	0x20400001

080008b8 <_fflush_r>:
 80008b8:	b538      	push	{r3, r4, r5, lr}
 80008ba:	690b      	ldr	r3, [r1, #16]
 80008bc:	4605      	mov	r5, r0
 80008be:	460c      	mov	r4, r1
 80008c0:	b1db      	cbz	r3, 80008fa <_fflush_r+0x42>
 80008c2:	b118      	cbz	r0, 80008cc <_fflush_r+0x14>
 80008c4:	6983      	ldr	r3, [r0, #24]
 80008c6:	b90b      	cbnz	r3, 80008cc <_fflush_r+0x14>
 80008c8:	f000 f860 	bl	800098c <__sinit>
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <_fflush_r+0x48>)
 80008ce:	429c      	cmp	r4, r3
 80008d0:	d109      	bne.n	80008e6 <_fflush_r+0x2e>
 80008d2:	686c      	ldr	r4, [r5, #4]
 80008d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008d8:	b17b      	cbz	r3, 80008fa <_fflush_r+0x42>
 80008da:	4621      	mov	r1, r4
 80008dc:	4628      	mov	r0, r5
 80008de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80008e2:	f7ff bf63 	b.w	80007ac <__sflush_r>
 80008e6:	4b07      	ldr	r3, [pc, #28]	; (8000904 <_fflush_r+0x4c>)
 80008e8:	429c      	cmp	r4, r3
 80008ea:	d101      	bne.n	80008f0 <_fflush_r+0x38>
 80008ec:	68ac      	ldr	r4, [r5, #8]
 80008ee:	e7f1      	b.n	80008d4 <_fflush_r+0x1c>
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <_fflush_r+0x50>)
 80008f2:	429c      	cmp	r4, r3
 80008f4:	bf08      	it	eq
 80008f6:	68ec      	ldreq	r4, [r5, #12]
 80008f8:	e7ec      	b.n	80008d4 <_fflush_r+0x1c>
 80008fa:	2000      	movs	r0, #0
 80008fc:	bd38      	pop	{r3, r4, r5, pc}
 80008fe:	bf00      	nop
 8000900:	08001448 	.word	0x08001448
 8000904:	08001468 	.word	0x08001468
 8000908:	08001428 	.word	0x08001428

0800090c <std>:
 800090c:	2300      	movs	r3, #0
 800090e:	b510      	push	{r4, lr}
 8000910:	4604      	mov	r4, r0
 8000912:	e9c0 3300 	strd	r3, r3, [r0]
 8000916:	6083      	str	r3, [r0, #8]
 8000918:	8181      	strh	r1, [r0, #12]
 800091a:	6643      	str	r3, [r0, #100]	; 0x64
 800091c:	81c2      	strh	r2, [r0, #14]
 800091e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000922:	6183      	str	r3, [r0, #24]
 8000924:	4619      	mov	r1, r3
 8000926:	2208      	movs	r2, #8
 8000928:	305c      	adds	r0, #92	; 0x5c
 800092a:	f7ff fe13 	bl	8000554 <memset>
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <std+0x38>)
 8000930:	6224      	str	r4, [r4, #32]
 8000932:	6263      	str	r3, [r4, #36]	; 0x24
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <std+0x3c>)
 8000936:	62a3      	str	r3, [r4, #40]	; 0x28
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <std+0x40>)
 800093a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <std+0x44>)
 800093e:	6323      	str	r3, [r4, #48]	; 0x30
 8000940:	bd10      	pop	{r4, pc}
 8000942:	bf00      	nop
 8000944:	08000cd5 	.word	0x08000cd5
 8000948:	08000cf7 	.word	0x08000cf7
 800094c:	08000d2f 	.word	0x08000d2f
 8000950:	08000d53 	.word	0x08000d53

08000954 <_cleanup_r>:
 8000954:	4901      	ldr	r1, [pc, #4]	; (800095c <_cleanup_r+0x8>)
 8000956:	f000 b885 	b.w	8000a64 <_fwalk_reent>
 800095a:	bf00      	nop
 800095c:	080008b9 	.word	0x080008b9

08000960 <__sfmoreglue>:
 8000960:	b570      	push	{r4, r5, r6, lr}
 8000962:	2568      	movs	r5, #104	; 0x68
 8000964:	1e4a      	subs	r2, r1, #1
 8000966:	4355      	muls	r5, r2
 8000968:	460e      	mov	r6, r1
 800096a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800096e:	f000 f947 	bl	8000c00 <_malloc_r>
 8000972:	4604      	mov	r4, r0
 8000974:	b140      	cbz	r0, 8000988 <__sfmoreglue+0x28>
 8000976:	2100      	movs	r1, #0
 8000978:	e9c0 1600 	strd	r1, r6, [r0]
 800097c:	300c      	adds	r0, #12
 800097e:	60a0      	str	r0, [r4, #8]
 8000980:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000984:	f7ff fde6 	bl	8000554 <memset>
 8000988:	4620      	mov	r0, r4
 800098a:	bd70      	pop	{r4, r5, r6, pc}

0800098c <__sinit>:
 800098c:	6983      	ldr	r3, [r0, #24]
 800098e:	b510      	push	{r4, lr}
 8000990:	4604      	mov	r4, r0
 8000992:	bb33      	cbnz	r3, 80009e2 <__sinit+0x56>
 8000994:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000998:	6503      	str	r3, [r0, #80]	; 0x50
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <__sinit+0x58>)
 800099c:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <__sinit+0x5c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	6282      	str	r2, [r0, #40]	; 0x28
 80009a2:	4298      	cmp	r0, r3
 80009a4:	bf04      	itt	eq
 80009a6:	2301      	moveq	r3, #1
 80009a8:	6183      	streq	r3, [r0, #24]
 80009aa:	f000 f81f 	bl	80009ec <__sfp>
 80009ae:	6060      	str	r0, [r4, #4]
 80009b0:	4620      	mov	r0, r4
 80009b2:	f000 f81b 	bl	80009ec <__sfp>
 80009b6:	60a0      	str	r0, [r4, #8]
 80009b8:	4620      	mov	r0, r4
 80009ba:	f000 f817 	bl	80009ec <__sfp>
 80009be:	2200      	movs	r2, #0
 80009c0:	60e0      	str	r0, [r4, #12]
 80009c2:	2104      	movs	r1, #4
 80009c4:	6860      	ldr	r0, [r4, #4]
 80009c6:	f7ff ffa1 	bl	800090c <std>
 80009ca:	2201      	movs	r2, #1
 80009cc:	2109      	movs	r1, #9
 80009ce:	68a0      	ldr	r0, [r4, #8]
 80009d0:	f7ff ff9c 	bl	800090c <std>
 80009d4:	2202      	movs	r2, #2
 80009d6:	2112      	movs	r1, #18
 80009d8:	68e0      	ldr	r0, [r4, #12]
 80009da:	f7ff ff97 	bl	800090c <std>
 80009de:	2301      	movs	r3, #1
 80009e0:	61a3      	str	r3, [r4, #24]
 80009e2:	bd10      	pop	{r4, pc}
 80009e4:	08001424 	.word	0x08001424
 80009e8:	08000955 	.word	0x08000955

080009ec <__sfp>:
 80009ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ee:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <__sfp+0x70>)
 80009f0:	4607      	mov	r7, r0
 80009f2:	681e      	ldr	r6, [r3, #0]
 80009f4:	69b3      	ldr	r3, [r6, #24]
 80009f6:	b913      	cbnz	r3, 80009fe <__sfp+0x12>
 80009f8:	4630      	mov	r0, r6
 80009fa:	f7ff ffc7 	bl	800098c <__sinit>
 80009fe:	3648      	adds	r6, #72	; 0x48
 8000a00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000a04:	3b01      	subs	r3, #1
 8000a06:	d503      	bpl.n	8000a10 <__sfp+0x24>
 8000a08:	6833      	ldr	r3, [r6, #0]
 8000a0a:	b133      	cbz	r3, 8000a1a <__sfp+0x2e>
 8000a0c:	6836      	ldr	r6, [r6, #0]
 8000a0e:	e7f7      	b.n	8000a00 <__sfp+0x14>
 8000a10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000a14:	b16d      	cbz	r5, 8000a32 <__sfp+0x46>
 8000a16:	3468      	adds	r4, #104	; 0x68
 8000a18:	e7f4      	b.n	8000a04 <__sfp+0x18>
 8000a1a:	2104      	movs	r1, #4
 8000a1c:	4638      	mov	r0, r7
 8000a1e:	f7ff ff9f 	bl	8000960 <__sfmoreglue>
 8000a22:	6030      	str	r0, [r6, #0]
 8000a24:	2800      	cmp	r0, #0
 8000a26:	d1f1      	bne.n	8000a0c <__sfp+0x20>
 8000a28:	230c      	movs	r3, #12
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4620      	mov	r0, r4
 8000a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <__sfp+0x74>)
 8000a34:	6665      	str	r5, [r4, #100]	; 0x64
 8000a36:	e9c4 5500 	strd	r5, r5, [r4]
 8000a3a:	60a5      	str	r5, [r4, #8]
 8000a3c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000a40:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000a44:	2208      	movs	r2, #8
 8000a46:	4629      	mov	r1, r5
 8000a48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000a4c:	f7ff fd82 	bl	8000554 <memset>
 8000a50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000a54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000a58:	e7e9      	b.n	8000a2e <__sfp+0x42>
 8000a5a:	bf00      	nop
 8000a5c:	08001424 	.word	0x08001424
 8000a60:	ffff0001 	.word	0xffff0001

08000a64 <_fwalk_reent>:
 8000a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a68:	4680      	mov	r8, r0
 8000a6a:	4689      	mov	r9, r1
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000a72:	b914      	cbnz	r4, 8000a7a <_fwalk_reent+0x16>
 8000a74:	4630      	mov	r0, r6
 8000a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a7a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000a7e:	3f01      	subs	r7, #1
 8000a80:	d501      	bpl.n	8000a86 <_fwalk_reent+0x22>
 8000a82:	6824      	ldr	r4, [r4, #0]
 8000a84:	e7f5      	b.n	8000a72 <_fwalk_reent+0xe>
 8000a86:	89ab      	ldrh	r3, [r5, #12]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d907      	bls.n	8000a9c <_fwalk_reent+0x38>
 8000a8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a90:	3301      	adds	r3, #1
 8000a92:	d003      	beq.n	8000a9c <_fwalk_reent+0x38>
 8000a94:	4629      	mov	r1, r5
 8000a96:	4640      	mov	r0, r8
 8000a98:	47c8      	blx	r9
 8000a9a:	4306      	orrs	r6, r0
 8000a9c:	3568      	adds	r5, #104	; 0x68
 8000a9e:	e7ee      	b.n	8000a7e <_fwalk_reent+0x1a>

08000aa0 <__swhatbuf_r>:
 8000aa0:	b570      	push	{r4, r5, r6, lr}
 8000aa2:	460e      	mov	r6, r1
 8000aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000aa8:	b096      	sub	sp, #88	; 0x58
 8000aaa:	2900      	cmp	r1, #0
 8000aac:	4614      	mov	r4, r2
 8000aae:	461d      	mov	r5, r3
 8000ab0:	da07      	bge.n	8000ac2 <__swhatbuf_r+0x22>
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	602b      	str	r3, [r5, #0]
 8000ab6:	89b3      	ldrh	r3, [r6, #12]
 8000ab8:	061a      	lsls	r2, r3, #24
 8000aba:	d410      	bmi.n	8000ade <__swhatbuf_r+0x3e>
 8000abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac0:	e00e      	b.n	8000ae0 <__swhatbuf_r+0x40>
 8000ac2:	466a      	mov	r2, sp
 8000ac4:	f000 f96c 	bl	8000da0 <_fstat_r>
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	dbf2      	blt.n	8000ab2 <__swhatbuf_r+0x12>
 8000acc:	9a01      	ldr	r2, [sp, #4]
 8000ace:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000ad2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000ad6:	425a      	negs	r2, r3
 8000ad8:	415a      	adcs	r2, r3
 8000ada:	602a      	str	r2, [r5, #0]
 8000adc:	e7ee      	b.n	8000abc <__swhatbuf_r+0x1c>
 8000ade:	2340      	movs	r3, #64	; 0x40
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	6023      	str	r3, [r4, #0]
 8000ae4:	b016      	add	sp, #88	; 0x58
 8000ae6:	bd70      	pop	{r4, r5, r6, pc}

08000ae8 <__smakebuf_r>:
 8000ae8:	898b      	ldrh	r3, [r1, #12]
 8000aea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000aec:	079d      	lsls	r5, r3, #30
 8000aee:	4606      	mov	r6, r0
 8000af0:	460c      	mov	r4, r1
 8000af2:	d507      	bpl.n	8000b04 <__smakebuf_r+0x1c>
 8000af4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000af8:	6023      	str	r3, [r4, #0]
 8000afa:	6123      	str	r3, [r4, #16]
 8000afc:	2301      	movs	r3, #1
 8000afe:	6163      	str	r3, [r4, #20]
 8000b00:	b002      	add	sp, #8
 8000b02:	bd70      	pop	{r4, r5, r6, pc}
 8000b04:	ab01      	add	r3, sp, #4
 8000b06:	466a      	mov	r2, sp
 8000b08:	f7ff ffca 	bl	8000aa0 <__swhatbuf_r>
 8000b0c:	9900      	ldr	r1, [sp, #0]
 8000b0e:	4605      	mov	r5, r0
 8000b10:	4630      	mov	r0, r6
 8000b12:	f000 f875 	bl	8000c00 <_malloc_r>
 8000b16:	b948      	cbnz	r0, 8000b2c <__smakebuf_r+0x44>
 8000b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b1c:	059a      	lsls	r2, r3, #22
 8000b1e:	d4ef      	bmi.n	8000b00 <__smakebuf_r+0x18>
 8000b20:	f023 0303 	bic.w	r3, r3, #3
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	81a3      	strh	r3, [r4, #12]
 8000b2a:	e7e3      	b.n	8000af4 <__smakebuf_r+0xc>
 8000b2c:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <__smakebuf_r+0x7c>)
 8000b2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8000b30:	89a3      	ldrh	r3, [r4, #12]
 8000b32:	6020      	str	r0, [r4, #0]
 8000b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b38:	81a3      	strh	r3, [r4, #12]
 8000b3a:	9b00      	ldr	r3, [sp, #0]
 8000b3c:	6120      	str	r0, [r4, #16]
 8000b3e:	6163      	str	r3, [r4, #20]
 8000b40:	9b01      	ldr	r3, [sp, #4]
 8000b42:	b15b      	cbz	r3, 8000b5c <__smakebuf_r+0x74>
 8000b44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b48:	4630      	mov	r0, r6
 8000b4a:	f000 f93b 	bl	8000dc4 <_isatty_r>
 8000b4e:	b128      	cbz	r0, 8000b5c <__smakebuf_r+0x74>
 8000b50:	89a3      	ldrh	r3, [r4, #12]
 8000b52:	f023 0303 	bic.w	r3, r3, #3
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	81a3      	strh	r3, [r4, #12]
 8000b5c:	89a3      	ldrh	r3, [r4, #12]
 8000b5e:	431d      	orrs	r5, r3
 8000b60:	81a5      	strh	r5, [r4, #12]
 8000b62:	e7cd      	b.n	8000b00 <__smakebuf_r+0x18>
 8000b64:	08000955 	.word	0x08000955

08000b68 <_free_r>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d043      	beq.n	8000bf8 <_free_r+0x90>
 8000b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b74:	1f0c      	subs	r4, r1, #4
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	bfb8      	it	lt
 8000b7a:	18e4      	addlt	r4, r4, r3
 8000b7c:	f000 f944 	bl	8000e08 <__malloc_lock>
 8000b80:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <_free_r+0x94>)
 8000b82:	6813      	ldr	r3, [r2, #0]
 8000b84:	4610      	mov	r0, r2
 8000b86:	b933      	cbnz	r3, 8000b96 <_free_r+0x2e>
 8000b88:	6063      	str	r3, [r4, #4]
 8000b8a:	6014      	str	r4, [r2, #0]
 8000b8c:	4628      	mov	r0, r5
 8000b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b92:	f000 b93a 	b.w	8000e0a <__malloc_unlock>
 8000b96:	42a3      	cmp	r3, r4
 8000b98:	d90b      	bls.n	8000bb2 <_free_r+0x4a>
 8000b9a:	6821      	ldr	r1, [r4, #0]
 8000b9c:	1862      	adds	r2, r4, r1
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	bf01      	itttt	eq
 8000ba2:	681a      	ldreq	r2, [r3, #0]
 8000ba4:	685b      	ldreq	r3, [r3, #4]
 8000ba6:	1852      	addeq	r2, r2, r1
 8000ba8:	6022      	streq	r2, [r4, #0]
 8000baa:	6063      	str	r3, [r4, #4]
 8000bac:	6004      	str	r4, [r0, #0]
 8000bae:	e7ed      	b.n	8000b8c <_free_r+0x24>
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	b10a      	cbz	r2, 8000bba <_free_r+0x52>
 8000bb6:	42a2      	cmp	r2, r4
 8000bb8:	d9fa      	bls.n	8000bb0 <_free_r+0x48>
 8000bba:	6819      	ldr	r1, [r3, #0]
 8000bbc:	1858      	adds	r0, r3, r1
 8000bbe:	42a0      	cmp	r0, r4
 8000bc0:	d10b      	bne.n	8000bda <_free_r+0x72>
 8000bc2:	6820      	ldr	r0, [r4, #0]
 8000bc4:	4401      	add	r1, r0
 8000bc6:	1858      	adds	r0, r3, r1
 8000bc8:	4282      	cmp	r2, r0
 8000bca:	6019      	str	r1, [r3, #0]
 8000bcc:	d1de      	bne.n	8000b8c <_free_r+0x24>
 8000bce:	6810      	ldr	r0, [r2, #0]
 8000bd0:	6852      	ldr	r2, [r2, #4]
 8000bd2:	4401      	add	r1, r0
 8000bd4:	6019      	str	r1, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	e7d8      	b.n	8000b8c <_free_r+0x24>
 8000bda:	d902      	bls.n	8000be2 <_free_r+0x7a>
 8000bdc:	230c      	movs	r3, #12
 8000bde:	602b      	str	r3, [r5, #0]
 8000be0:	e7d4      	b.n	8000b8c <_free_r+0x24>
 8000be2:	6820      	ldr	r0, [r4, #0]
 8000be4:	1821      	adds	r1, r4, r0
 8000be6:	428a      	cmp	r2, r1
 8000be8:	bf01      	itttt	eq
 8000bea:	6811      	ldreq	r1, [r2, #0]
 8000bec:	6852      	ldreq	r2, [r2, #4]
 8000bee:	1809      	addeq	r1, r1, r0
 8000bf0:	6021      	streq	r1, [r4, #0]
 8000bf2:	6062      	str	r2, [r4, #4]
 8000bf4:	605c      	str	r4, [r3, #4]
 8000bf6:	e7c9      	b.n	8000b8c <_free_r+0x24>
 8000bf8:	bd38      	pop	{r3, r4, r5, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200000a0 	.word	0x200000a0

08000c00 <_malloc_r>:
 8000c00:	b570      	push	{r4, r5, r6, lr}
 8000c02:	1ccd      	adds	r5, r1, #3
 8000c04:	f025 0503 	bic.w	r5, r5, #3
 8000c08:	3508      	adds	r5, #8
 8000c0a:	2d0c      	cmp	r5, #12
 8000c0c:	bf38      	it	cc
 8000c0e:	250c      	movcc	r5, #12
 8000c10:	2d00      	cmp	r5, #0
 8000c12:	4606      	mov	r6, r0
 8000c14:	db01      	blt.n	8000c1a <_malloc_r+0x1a>
 8000c16:	42a9      	cmp	r1, r5
 8000c18:	d903      	bls.n	8000c22 <_malloc_r+0x22>
 8000c1a:	230c      	movs	r3, #12
 8000c1c:	6033      	str	r3, [r6, #0]
 8000c1e:	2000      	movs	r0, #0
 8000c20:	bd70      	pop	{r4, r5, r6, pc}
 8000c22:	f000 f8f1 	bl	8000e08 <__malloc_lock>
 8000c26:	4a21      	ldr	r2, [pc, #132]	; (8000cac <_malloc_r+0xac>)
 8000c28:	6814      	ldr	r4, [r2, #0]
 8000c2a:	4621      	mov	r1, r4
 8000c2c:	b991      	cbnz	r1, 8000c54 <_malloc_r+0x54>
 8000c2e:	4c20      	ldr	r4, [pc, #128]	; (8000cb0 <_malloc_r+0xb0>)
 8000c30:	6823      	ldr	r3, [r4, #0]
 8000c32:	b91b      	cbnz	r3, 8000c3c <_malloc_r+0x3c>
 8000c34:	4630      	mov	r0, r6
 8000c36:	f000 f83d 	bl	8000cb4 <_sbrk_r>
 8000c3a:	6020      	str	r0, [r4, #0]
 8000c3c:	4629      	mov	r1, r5
 8000c3e:	4630      	mov	r0, r6
 8000c40:	f000 f838 	bl	8000cb4 <_sbrk_r>
 8000c44:	1c43      	adds	r3, r0, #1
 8000c46:	d124      	bne.n	8000c92 <_malloc_r+0x92>
 8000c48:	230c      	movs	r3, #12
 8000c4a:	4630      	mov	r0, r6
 8000c4c:	6033      	str	r3, [r6, #0]
 8000c4e:	f000 f8dc 	bl	8000e0a <__malloc_unlock>
 8000c52:	e7e4      	b.n	8000c1e <_malloc_r+0x1e>
 8000c54:	680b      	ldr	r3, [r1, #0]
 8000c56:	1b5b      	subs	r3, r3, r5
 8000c58:	d418      	bmi.n	8000c8c <_malloc_r+0x8c>
 8000c5a:	2b0b      	cmp	r3, #11
 8000c5c:	d90f      	bls.n	8000c7e <_malloc_r+0x7e>
 8000c5e:	600b      	str	r3, [r1, #0]
 8000c60:	18cc      	adds	r4, r1, r3
 8000c62:	50cd      	str	r5, [r1, r3]
 8000c64:	4630      	mov	r0, r6
 8000c66:	f000 f8d0 	bl	8000e0a <__malloc_unlock>
 8000c6a:	f104 000b 	add.w	r0, r4, #11
 8000c6e:	1d23      	adds	r3, r4, #4
 8000c70:	f020 0007 	bic.w	r0, r0, #7
 8000c74:	1ac3      	subs	r3, r0, r3
 8000c76:	d0d3      	beq.n	8000c20 <_malloc_r+0x20>
 8000c78:	425a      	negs	r2, r3
 8000c7a:	50e2      	str	r2, [r4, r3]
 8000c7c:	e7d0      	b.n	8000c20 <_malloc_r+0x20>
 8000c7e:	684b      	ldr	r3, [r1, #4]
 8000c80:	428c      	cmp	r4, r1
 8000c82:	bf16      	itet	ne
 8000c84:	6063      	strne	r3, [r4, #4]
 8000c86:	6013      	streq	r3, [r2, #0]
 8000c88:	460c      	movne	r4, r1
 8000c8a:	e7eb      	b.n	8000c64 <_malloc_r+0x64>
 8000c8c:	460c      	mov	r4, r1
 8000c8e:	6849      	ldr	r1, [r1, #4]
 8000c90:	e7cc      	b.n	8000c2c <_malloc_r+0x2c>
 8000c92:	1cc4      	adds	r4, r0, #3
 8000c94:	f024 0403 	bic.w	r4, r4, #3
 8000c98:	42a0      	cmp	r0, r4
 8000c9a:	d005      	beq.n	8000ca8 <_malloc_r+0xa8>
 8000c9c:	1a21      	subs	r1, r4, r0
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	f000 f808 	bl	8000cb4 <_sbrk_r>
 8000ca4:	3001      	adds	r0, #1
 8000ca6:	d0cf      	beq.n	8000c48 <_malloc_r+0x48>
 8000ca8:	6025      	str	r5, [r4, #0]
 8000caa:	e7db      	b.n	8000c64 <_malloc_r+0x64>
 8000cac:	200000a0 	.word	0x200000a0
 8000cb0:	200000a4 	.word	0x200000a4

08000cb4 <_sbrk_r>:
 8000cb4:	b538      	push	{r3, r4, r5, lr}
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	4c05      	ldr	r4, [pc, #20]	; (8000cd0 <_sbrk_r+0x1c>)
 8000cba:	4605      	mov	r5, r0
 8000cbc:	4608      	mov	r0, r1
 8000cbe:	6023      	str	r3, [r4, #0]
 8000cc0:	f7ff fbbe 	bl	8000440 <_sbrk>
 8000cc4:	1c43      	adds	r3, r0, #1
 8000cc6:	d102      	bne.n	8000cce <_sbrk_r+0x1a>
 8000cc8:	6823      	ldr	r3, [r4, #0]
 8000cca:	b103      	cbz	r3, 8000cce <_sbrk_r+0x1a>
 8000ccc:	602b      	str	r3, [r5, #0]
 8000cce:	bd38      	pop	{r3, r4, r5, pc}
 8000cd0:	20000164 	.word	0x20000164

08000cd4 <__sread>:
 8000cd4:	b510      	push	{r4, lr}
 8000cd6:	460c      	mov	r4, r1
 8000cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cdc:	f000 f896 	bl	8000e0c <_read_r>
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	bfab      	itete	ge
 8000ce4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000ce6:	89a3      	ldrhlt	r3, [r4, #12]
 8000ce8:	181b      	addge	r3, r3, r0
 8000cea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000cee:	bfac      	ite	ge
 8000cf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8000cf2:	81a3      	strhlt	r3, [r4, #12]
 8000cf4:	bd10      	pop	{r4, pc}

08000cf6 <__swrite>:
 8000cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cfa:	461f      	mov	r7, r3
 8000cfc:	898b      	ldrh	r3, [r1, #12]
 8000cfe:	4605      	mov	r5, r0
 8000d00:	05db      	lsls	r3, r3, #23
 8000d02:	460c      	mov	r4, r1
 8000d04:	4616      	mov	r6, r2
 8000d06:	d505      	bpl.n	8000d14 <__swrite+0x1e>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d10:	f000 f868 	bl	8000de4 <_lseek_r>
 8000d14:	89a3      	ldrh	r3, [r4, #12]
 8000d16:	4632      	mov	r2, r6
 8000d18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d1c:	81a3      	strh	r3, [r4, #12]
 8000d1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d22:	463b      	mov	r3, r7
 8000d24:	4628      	mov	r0, r5
 8000d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d2a:	f000 b817 	b.w	8000d5c <_write_r>

08000d2e <__sseek>:
 8000d2e:	b510      	push	{r4, lr}
 8000d30:	460c      	mov	r4, r1
 8000d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d36:	f000 f855 	bl	8000de4 <_lseek_r>
 8000d3a:	1c43      	adds	r3, r0, #1
 8000d3c:	89a3      	ldrh	r3, [r4, #12]
 8000d3e:	bf15      	itete	ne
 8000d40:	6560      	strne	r0, [r4, #84]	; 0x54
 8000d42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000d46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000d4a:	81a3      	strheq	r3, [r4, #12]
 8000d4c:	bf18      	it	ne
 8000d4e:	81a3      	strhne	r3, [r4, #12]
 8000d50:	bd10      	pop	{r4, pc}

08000d52 <__sclose>:
 8000d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d56:	f000 b813 	b.w	8000d80 <_close_r>
	...

08000d5c <_write_r>:
 8000d5c:	b538      	push	{r3, r4, r5, lr}
 8000d5e:	4605      	mov	r5, r0
 8000d60:	4608      	mov	r0, r1
 8000d62:	4611      	mov	r1, r2
 8000d64:	2200      	movs	r2, #0
 8000d66:	4c05      	ldr	r4, [pc, #20]	; (8000d7c <_write_r+0x20>)
 8000d68:	6022      	str	r2, [r4, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	f000 f911 	bl	8000f92 <_write>
 8000d70:	1c43      	adds	r3, r0, #1
 8000d72:	d102      	bne.n	8000d7a <_write_r+0x1e>
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	b103      	cbz	r3, 8000d7a <_write_r+0x1e>
 8000d78:	602b      	str	r3, [r5, #0]
 8000d7a:	bd38      	pop	{r3, r4, r5, pc}
 8000d7c:	20000164 	.word	0x20000164

08000d80 <_close_r>:
 8000d80:	b538      	push	{r3, r4, r5, lr}
 8000d82:	2300      	movs	r3, #0
 8000d84:	4c05      	ldr	r4, [pc, #20]	; (8000d9c <_close_r+0x1c>)
 8000d86:	4605      	mov	r5, r0
 8000d88:	4608      	mov	r0, r1
 8000d8a:	6023      	str	r3, [r4, #0]
 8000d8c:	f000 f930 	bl	8000ff0 <_close>
 8000d90:	1c43      	adds	r3, r0, #1
 8000d92:	d102      	bne.n	8000d9a <_close_r+0x1a>
 8000d94:	6823      	ldr	r3, [r4, #0]
 8000d96:	b103      	cbz	r3, 8000d9a <_close_r+0x1a>
 8000d98:	602b      	str	r3, [r5, #0]
 8000d9a:	bd38      	pop	{r3, r4, r5, pc}
 8000d9c:	20000164 	.word	0x20000164

08000da0 <_fstat_r>:
 8000da0:	b538      	push	{r3, r4, r5, lr}
 8000da2:	2300      	movs	r3, #0
 8000da4:	4c06      	ldr	r4, [pc, #24]	; (8000dc0 <_fstat_r+0x20>)
 8000da6:	4605      	mov	r5, r0
 8000da8:	4608      	mov	r0, r1
 8000daa:	4611      	mov	r1, r2
 8000dac:	6023      	str	r3, [r4, #0]
 8000dae:	f000 f966 	bl	800107e <_fstat>
 8000db2:	1c43      	adds	r3, r0, #1
 8000db4:	d102      	bne.n	8000dbc <_fstat_r+0x1c>
 8000db6:	6823      	ldr	r3, [r4, #0]
 8000db8:	b103      	cbz	r3, 8000dbc <_fstat_r+0x1c>
 8000dba:	602b      	str	r3, [r5, #0]
 8000dbc:	bd38      	pop	{r3, r4, r5, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000164 	.word	0x20000164

08000dc4 <_isatty_r>:
 8000dc4:	b538      	push	{r3, r4, r5, lr}
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	4c05      	ldr	r4, [pc, #20]	; (8000de0 <_isatty_r+0x1c>)
 8000dca:	4605      	mov	r5, r0
 8000dcc:	4608      	mov	r0, r1
 8000dce:	6023      	str	r3, [r4, #0]
 8000dd0:	f000 fab8 	bl	8001344 <_isatty>
 8000dd4:	1c43      	adds	r3, r0, #1
 8000dd6:	d102      	bne.n	8000dde <_isatty_r+0x1a>
 8000dd8:	6823      	ldr	r3, [r4, #0]
 8000dda:	b103      	cbz	r3, 8000dde <_isatty_r+0x1a>
 8000ddc:	602b      	str	r3, [r5, #0]
 8000dde:	bd38      	pop	{r3, r4, r5, pc}
 8000de0:	20000164 	.word	0x20000164

08000de4 <_lseek_r>:
 8000de4:	b538      	push	{r3, r4, r5, lr}
 8000de6:	4605      	mov	r5, r0
 8000de8:	4608      	mov	r0, r1
 8000dea:	4611      	mov	r1, r2
 8000dec:	2200      	movs	r2, #0
 8000dee:	4c05      	ldr	r4, [pc, #20]	; (8000e04 <_lseek_r+0x20>)
 8000df0:	6022      	str	r2, [r4, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	f000 f8bb 	bl	8000f6e <_lseek>
 8000df8:	1c43      	adds	r3, r0, #1
 8000dfa:	d102      	bne.n	8000e02 <_lseek_r+0x1e>
 8000dfc:	6823      	ldr	r3, [r4, #0]
 8000dfe:	b103      	cbz	r3, 8000e02 <_lseek_r+0x1e>
 8000e00:	602b      	str	r3, [r5, #0]
 8000e02:	bd38      	pop	{r3, r4, r5, pc}
 8000e04:	20000164 	.word	0x20000164

08000e08 <__malloc_lock>:
 8000e08:	4770      	bx	lr

08000e0a <__malloc_unlock>:
 8000e0a:	4770      	bx	lr

08000e0c <_read_r>:
 8000e0c:	b538      	push	{r3, r4, r5, lr}
 8000e0e:	4605      	mov	r5, r0
 8000e10:	4608      	mov	r0, r1
 8000e12:	4611      	mov	r1, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	4c05      	ldr	r4, [pc, #20]	; (8000e2c <_read_r+0x20>)
 8000e18:	6022      	str	r2, [r4, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	f000 f850 	bl	8000ec0 <_read>
 8000e20:	1c43      	adds	r3, r0, #1
 8000e22:	d102      	bne.n	8000e2a <_read_r+0x1e>
 8000e24:	6823      	ldr	r3, [r4, #0]
 8000e26:	b103      	cbz	r3, 8000e2a <_read_r+0x1e>
 8000e28:	602b      	str	r3, [r5, #0]
 8000e2a:	bd38      	pop	{r3, r4, r5, pc}
 8000e2c:	20000164 	.word	0x20000164

08000e30 <findslot>:
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <findslot+0x2c>)
 8000e32:	b510      	push	{r4, lr}
 8000e34:	4604      	mov	r4, r0
 8000e36:	6818      	ldr	r0, [r3, #0]
 8000e38:	b118      	cbz	r0, 8000e42 <findslot+0x12>
 8000e3a:	6983      	ldr	r3, [r0, #24]
 8000e3c:	b90b      	cbnz	r3, 8000e42 <findslot+0x12>
 8000e3e:	f7ff fda5 	bl	800098c <__sinit>
 8000e42:	2c13      	cmp	r4, #19
 8000e44:	d807      	bhi.n	8000e56 <findslot+0x26>
 8000e46:	4806      	ldr	r0, [pc, #24]	; (8000e60 <findslot+0x30>)
 8000e48:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	d002      	beq.n	8000e56 <findslot+0x26>
 8000e50:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8000e54:	bd10      	pop	{r4, pc}
 8000e56:	2000      	movs	r0, #0
 8000e58:	e7fc      	b.n	8000e54 <findslot+0x24>
 8000e5a:	bf00      	nop
 8000e5c:	20000010 	.word	0x20000010
 8000e60:	200000b4 	.word	0x200000b4

08000e64 <checkerror>:
 8000e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e66:	1c43      	adds	r3, r0, #1
 8000e68:	4605      	mov	r5, r0
 8000e6a:	d109      	bne.n	8000e80 <checkerror+0x1c>
 8000e6c:	f7ff fb48 	bl	8000500 <__errno>
 8000e70:	2413      	movs	r4, #19
 8000e72:	4606      	mov	r6, r0
 8000e74:	2700      	movs	r7, #0
 8000e76:	4620      	mov	r0, r4
 8000e78:	4639      	mov	r1, r7
 8000e7a:	beab      	bkpt	0x00ab
 8000e7c:	4604      	mov	r4, r0
 8000e7e:	6034      	str	r4, [r6, #0]
 8000e80:	4628      	mov	r0, r5
 8000e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000e84 <error>:
 8000e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e86:	4605      	mov	r5, r0
 8000e88:	f7ff fb3a 	bl	8000500 <__errno>
 8000e8c:	2413      	movs	r4, #19
 8000e8e:	4606      	mov	r6, r0
 8000e90:	2700      	movs	r7, #0
 8000e92:	4620      	mov	r0, r4
 8000e94:	4639      	mov	r1, r7
 8000e96:	beab      	bkpt	0x00ab
 8000e98:	4604      	mov	r4, r0
 8000e9a:	6034      	str	r4, [r6, #0]
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000ea0 <_swiread>:
 8000ea0:	b530      	push	{r4, r5, lr}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8000ea8:	9203      	str	r2, [sp, #12]
 8000eaa:	2406      	movs	r4, #6
 8000eac:	ad01      	add	r5, sp, #4
 8000eae:	4620      	mov	r0, r4
 8000eb0:	4629      	mov	r1, r5
 8000eb2:	beab      	bkpt	0x00ab
 8000eb4:	4604      	mov	r4, r0
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	f7ff ffd4 	bl	8000e64 <checkerror>
 8000ebc:	b005      	add	sp, #20
 8000ebe:	bd30      	pop	{r4, r5, pc}

08000ec0 <_read>:
 8000ec0:	b570      	push	{r4, r5, r6, lr}
 8000ec2:	460e      	mov	r6, r1
 8000ec4:	4615      	mov	r5, r2
 8000ec6:	f7ff ffb3 	bl	8000e30 <findslot>
 8000eca:	4604      	mov	r4, r0
 8000ecc:	b930      	cbnz	r0, 8000edc <_read+0x1c>
 8000ece:	f7ff fb17 	bl	8000500 <__errno>
 8000ed2:	2309      	movs	r3, #9
 8000ed4:	6003      	str	r3, [r0, #0]
 8000ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eda:	bd70      	pop	{r4, r5, r6, pc}
 8000edc:	462a      	mov	r2, r5
 8000ede:	4631      	mov	r1, r6
 8000ee0:	6800      	ldr	r0, [r0, #0]
 8000ee2:	f7ff ffdd 	bl	8000ea0 <_swiread>
 8000ee6:	1c43      	adds	r3, r0, #1
 8000ee8:	bf1f      	itttt	ne
 8000eea:	6863      	ldrne	r3, [r4, #4]
 8000eec:	1a28      	subne	r0, r5, r0
 8000eee:	181b      	addne	r3, r3, r0
 8000ef0:	6063      	strne	r3, [r4, #4]
 8000ef2:	e7f2      	b.n	8000eda <_read+0x1a>

08000ef4 <_swilseek>:
 8000ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ef6:	460c      	mov	r4, r1
 8000ef8:	4616      	mov	r6, r2
 8000efa:	f7ff ff99 	bl	8000e30 <findslot>
 8000efe:	4605      	mov	r5, r0
 8000f00:	b940      	cbnz	r0, 8000f14 <_swilseek+0x20>
 8000f02:	f7ff fafd 	bl	8000500 <__errno>
 8000f06:	2309      	movs	r3, #9
 8000f08:	6003      	str	r3, [r0, #0]
 8000f0a:	f04f 34ff 	mov.w	r4, #4294967295
 8000f0e:	4620      	mov	r0, r4
 8000f10:	b003      	add	sp, #12
 8000f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f14:	2e02      	cmp	r6, #2
 8000f16:	d903      	bls.n	8000f20 <_swilseek+0x2c>
 8000f18:	f7ff faf2 	bl	8000500 <__errno>
 8000f1c:	2316      	movs	r3, #22
 8000f1e:	e7f3      	b.n	8000f08 <_swilseek+0x14>
 8000f20:	2e01      	cmp	r6, #1
 8000f22:	d112      	bne.n	8000f4a <_swilseek+0x56>
 8000f24:	6843      	ldr	r3, [r0, #4]
 8000f26:	18e4      	adds	r4, r4, r3
 8000f28:	d4f6      	bmi.n	8000f18 <_swilseek+0x24>
 8000f2a:	682b      	ldr	r3, [r5, #0]
 8000f2c:	260a      	movs	r6, #10
 8000f2e:	e9cd 3400 	strd	r3, r4, [sp]
 8000f32:	466f      	mov	r7, sp
 8000f34:	4630      	mov	r0, r6
 8000f36:	4639      	mov	r1, r7
 8000f38:	beab      	bkpt	0x00ab
 8000f3a:	4606      	mov	r6, r0
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	f7ff ff91 	bl	8000e64 <checkerror>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	dbe1      	blt.n	8000f0a <_swilseek+0x16>
 8000f46:	606c      	str	r4, [r5, #4]
 8000f48:	e7e1      	b.n	8000f0e <_swilseek+0x1a>
 8000f4a:	2e02      	cmp	r6, #2
 8000f4c:	d1ed      	bne.n	8000f2a <_swilseek+0x36>
 8000f4e:	6803      	ldr	r3, [r0, #0]
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	f847 3d08 	str.w	r3, [r7, #-8]!
 8000f56:	260c      	movs	r6, #12
 8000f58:	4630      	mov	r0, r6
 8000f5a:	4639      	mov	r1, r7
 8000f5c:	beab      	bkpt	0x00ab
 8000f5e:	4606      	mov	r6, r0
 8000f60:	4630      	mov	r0, r6
 8000f62:	f7ff ff7f 	bl	8000e64 <checkerror>
 8000f66:	1c43      	adds	r3, r0, #1
 8000f68:	d0cf      	beq.n	8000f0a <_swilseek+0x16>
 8000f6a:	4404      	add	r4, r0
 8000f6c:	e7dd      	b.n	8000f2a <_swilseek+0x36>

08000f6e <_lseek>:
 8000f6e:	f7ff bfc1 	b.w	8000ef4 <_swilseek>

08000f72 <_swiwrite>:
 8000f72:	b530      	push	{r4, r5, lr}
 8000f74:	b085      	sub	sp, #20
 8000f76:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8000f7a:	9203      	str	r2, [sp, #12]
 8000f7c:	2405      	movs	r4, #5
 8000f7e:	ad01      	add	r5, sp, #4
 8000f80:	4620      	mov	r0, r4
 8000f82:	4629      	mov	r1, r5
 8000f84:	beab      	bkpt	0x00ab
 8000f86:	4604      	mov	r4, r0
 8000f88:	4620      	mov	r0, r4
 8000f8a:	f7ff ff6b 	bl	8000e64 <checkerror>
 8000f8e:	b005      	add	sp, #20
 8000f90:	bd30      	pop	{r4, r5, pc}

08000f92 <_write>:
 8000f92:	b570      	push	{r4, r5, r6, lr}
 8000f94:	460e      	mov	r6, r1
 8000f96:	4615      	mov	r5, r2
 8000f98:	f7ff ff4a 	bl	8000e30 <findslot>
 8000f9c:	4604      	mov	r4, r0
 8000f9e:	b930      	cbnz	r0, 8000fae <_write+0x1c>
 8000fa0:	f7ff faae 	bl	8000500 <__errno>
 8000fa4:	2309      	movs	r3, #9
 8000fa6:	6003      	str	r3, [r0, #0]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	bd70      	pop	{r4, r5, r6, pc}
 8000fae:	462a      	mov	r2, r5
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	6800      	ldr	r0, [r0, #0]
 8000fb4:	f7ff ffdd 	bl	8000f72 <_swiwrite>
 8000fb8:	1e02      	subs	r2, r0, #0
 8000fba:	dbf5      	blt.n	8000fa8 <_write+0x16>
 8000fbc:	6863      	ldr	r3, [r4, #4]
 8000fbe:	1aa8      	subs	r0, r5, r2
 8000fc0:	4403      	add	r3, r0
 8000fc2:	42aa      	cmp	r2, r5
 8000fc4:	6063      	str	r3, [r4, #4]
 8000fc6:	d1f1      	bne.n	8000fac <_write+0x1a>
 8000fc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f7ff bf59 	b.w	8000e84 <error>

08000fd2 <_swiclose>:
 8000fd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000fd4:	ad02      	add	r5, sp, #8
 8000fd6:	f845 0d04 	str.w	r0, [r5, #-4]!
 8000fda:	2402      	movs	r4, #2
 8000fdc:	4620      	mov	r0, r4
 8000fde:	4629      	mov	r1, r5
 8000fe0:	beab      	bkpt	0x00ab
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	f7ff ff3d 	bl	8000e64 <checkerror>
 8000fea:	b003      	add	sp, #12
 8000fec:	bd30      	pop	{r4, r5, pc}
	...

08000ff0 <_close>:
 8000ff0:	b538      	push	{r3, r4, r5, lr}
 8000ff2:	4605      	mov	r5, r0
 8000ff4:	f7ff ff1c 	bl	8000e30 <findslot>
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	b930      	cbnz	r0, 800100a <_close+0x1a>
 8000ffc:	f7ff fa80 	bl	8000500 <__errno>
 8001000:	2309      	movs	r3, #9
 8001002:	6003      	str	r3, [r0, #0]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	bd38      	pop	{r3, r4, r5, pc}
 800100a:	3d01      	subs	r5, #1
 800100c:	2d01      	cmp	r5, #1
 800100e:	d809      	bhi.n	8001024 <_close+0x34>
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <_close+0x48>)
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	429a      	cmp	r2, r3
 8001018:	d104      	bne.n	8001024 <_close+0x34>
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	6003      	str	r3, [r0, #0]
 8001020:	2000      	movs	r0, #0
 8001022:	e7f1      	b.n	8001008 <_close+0x18>
 8001024:	6820      	ldr	r0, [r4, #0]
 8001026:	f7ff ffd4 	bl	8000fd2 <_swiclose>
 800102a:	2800      	cmp	r0, #0
 800102c:	d1ec      	bne.n	8001008 <_close+0x18>
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	6023      	str	r3, [r4, #0]
 8001034:	e7e8      	b.n	8001008 <_close+0x18>
 8001036:	bf00      	nop
 8001038:	200000b4 	.word	0x200000b4

0800103c <_swistat>:
 800103c:	b570      	push	{r4, r5, r6, lr}
 800103e:	460c      	mov	r4, r1
 8001040:	f7ff fef6 	bl	8000e30 <findslot>
 8001044:	4606      	mov	r6, r0
 8001046:	b930      	cbnz	r0, 8001056 <_swistat+0x1a>
 8001048:	f7ff fa5a 	bl	8000500 <__errno>
 800104c:	2309      	movs	r3, #9
 800104e:	6003      	str	r3, [r0, #0]
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	bd70      	pop	{r4, r5, r6, pc}
 8001056:	6863      	ldr	r3, [r4, #4]
 8001058:	250c      	movs	r5, #12
 800105a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800105e:	6063      	str	r3, [r4, #4]
 8001060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001064:	6463      	str	r3, [r4, #68]	; 0x44
 8001066:	4628      	mov	r0, r5
 8001068:	4631      	mov	r1, r6
 800106a:	beab      	bkpt	0x00ab
 800106c:	4605      	mov	r5, r0
 800106e:	4628      	mov	r0, r5
 8001070:	f7ff fef8 	bl	8000e64 <checkerror>
 8001074:	1c43      	adds	r3, r0, #1
 8001076:	bf1c      	itt	ne
 8001078:	6120      	strne	r0, [r4, #16]
 800107a:	2000      	movne	r0, #0
 800107c:	e7ea      	b.n	8001054 <_swistat+0x18>

0800107e <_fstat>:
 800107e:	460b      	mov	r3, r1
 8001080:	b510      	push	{r4, lr}
 8001082:	2100      	movs	r1, #0
 8001084:	4604      	mov	r4, r0
 8001086:	2258      	movs	r2, #88	; 0x58
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa63 	bl	8000554 <memset>
 800108e:	4601      	mov	r1, r0
 8001090:	4620      	mov	r0, r4
 8001092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001096:	f7ff bfd1 	b.w	800103c <_swistat>

0800109a <_stat>:
 800109a:	b538      	push	{r3, r4, r5, lr}
 800109c:	460d      	mov	r5, r1
 800109e:	4604      	mov	r4, r0
 80010a0:	2258      	movs	r2, #88	; 0x58
 80010a2:	2100      	movs	r1, #0
 80010a4:	4628      	mov	r0, r5
 80010a6:	f7ff fa55 	bl	8000554 <memset>
 80010aa:	4620      	mov	r0, r4
 80010ac:	2100      	movs	r1, #0
 80010ae:	f000 f811 	bl	80010d4 <_swiopen>
 80010b2:	1c43      	adds	r3, r0, #1
 80010b4:	4604      	mov	r4, r0
 80010b6:	d00b      	beq.n	80010d0 <_stat+0x36>
 80010b8:	686b      	ldr	r3, [r5, #4]
 80010ba:	4629      	mov	r1, r5
 80010bc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80010c0:	606b      	str	r3, [r5, #4]
 80010c2:	f7ff ffbb 	bl	800103c <_swistat>
 80010c6:	4605      	mov	r5, r0
 80010c8:	4620      	mov	r0, r4
 80010ca:	f7ff ff91 	bl	8000ff0 <_close>
 80010ce:	462c      	mov	r4, r5
 80010d0:	4620      	mov	r0, r4
 80010d2:	bd38      	pop	{r3, r4, r5, pc}

080010d4 <_swiopen>:
 80010d4:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <_swiopen+0xb0>)
 80010d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010da:	4682      	mov	sl, r0
 80010dc:	460e      	mov	r6, r1
 80010de:	2500      	movs	r5, #0
 80010e0:	4698      	mov	r8, r3
 80010e2:	b096      	sub	sp, #88	; 0x58
 80010e4:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 80010e8:	00ef      	lsls	r7, r5, #3
 80010ea:	1c61      	adds	r1, r4, #1
 80010ec:	d036      	beq.n	800115c <_swiopen+0x88>
 80010ee:	3501      	adds	r5, #1
 80010f0:	2d14      	cmp	r5, #20
 80010f2:	d1f7      	bne.n	80010e4 <_swiopen+0x10>
 80010f4:	f7ff fa04 	bl	8000500 <__errno>
 80010f8:	2318      	movs	r3, #24
 80010fa:	f04f 34ff 	mov.w	r4, #4294967295
 80010fe:	6003      	str	r3, [r0, #0]
 8001100:	e03c      	b.n	800117c <_swiopen+0xa8>
 8001102:	f240 6301 	movw	r3, #1537	; 0x601
 8001106:	f3c6 4400 	ubfx	r4, r6, #16, #1
 800110a:	07b2      	lsls	r2, r6, #30
 800110c:	bf48      	it	mi
 800110e:	f044 0402 	orrmi.w	r4, r4, #2
 8001112:	421e      	tst	r6, r3
 8001114:	bf18      	it	ne
 8001116:	f044 0404 	orrne.w	r4, r4, #4
 800111a:	0733      	lsls	r3, r6, #28
 800111c:	bf48      	it	mi
 800111e:	f024 0404 	bicmi.w	r4, r4, #4
 8001122:	4650      	mov	r0, sl
 8001124:	bf48      	it	mi
 8001126:	f044 0408 	orrmi.w	r4, r4, #8
 800112a:	f8cd a000 	str.w	sl, [sp]
 800112e:	f7ff f81f 	bl	8000170 <strlen>
 8001132:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001136:	2401      	movs	r4, #1
 8001138:	4620      	mov	r0, r4
 800113a:	4649      	mov	r1, r9
 800113c:	beab      	bkpt	0x00ab
 800113e:	4604      	mov	r4, r0
 8001140:	2c00      	cmp	r4, #0
 8001142:	db06      	blt.n	8001152 <_swiopen+0x7e>
 8001144:	2300      	movs	r3, #0
 8001146:	4447      	add	r7, r8
 8001148:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	462c      	mov	r4, r5
 8001150:	e014      	b.n	800117c <_swiopen+0xa8>
 8001152:	4620      	mov	r0, r4
 8001154:	f7ff fe96 	bl	8000e84 <error>
 8001158:	4604      	mov	r4, r0
 800115a:	e00f      	b.n	800117c <_swiopen+0xa8>
 800115c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8001160:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001164:	46e9      	mov	r9, sp
 8001166:	d1cc      	bne.n	8001102 <_swiopen+0x2e>
 8001168:	4649      	mov	r1, r9
 800116a:	4650      	mov	r0, sl
 800116c:	f7ff ff95 	bl	800109a <_stat>
 8001170:	3001      	adds	r0, #1
 8001172:	d0c6      	beq.n	8001102 <_swiopen+0x2e>
 8001174:	f7ff f9c4 	bl	8000500 <__errno>
 8001178:	2311      	movs	r3, #17
 800117a:	6003      	str	r3, [r0, #0]
 800117c:	4620      	mov	r0, r4
 800117e:	b016      	add	sp, #88	; 0x58
 8001180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001184:	200000b4 	.word	0x200000b4

08001188 <_get_semihosting_exts>:
 8001188:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800118c:	4607      	mov	r7, r0
 800118e:	4688      	mov	r8, r1
 8001190:	4829      	ldr	r0, [pc, #164]	; (8001238 <_get_semihosting_exts+0xb0>)
 8001192:	2100      	movs	r1, #0
 8001194:	4615      	mov	r5, r2
 8001196:	f7ff ff9d 	bl	80010d4 <_swiopen>
 800119a:	4604      	mov	r4, r0
 800119c:	462a      	mov	r2, r5
 800119e:	2100      	movs	r1, #0
 80011a0:	4638      	mov	r0, r7
 80011a2:	f7ff f9d7 	bl	8000554 <memset>
 80011a6:	1c63      	adds	r3, r4, #1
 80011a8:	d015      	beq.n	80011d6 <_get_semihosting_exts+0x4e>
 80011aa:	4620      	mov	r0, r4
 80011ac:	f7ff fe40 	bl	8000e30 <findslot>
 80011b0:	260c      	movs	r6, #12
 80011b2:	4681      	mov	r9, r0
 80011b4:	4630      	mov	r0, r6
 80011b6:	4649      	mov	r1, r9
 80011b8:	beab      	bkpt	0x00ab
 80011ba:	4606      	mov	r6, r0
 80011bc:	4630      	mov	r0, r6
 80011be:	f7ff fe51 	bl	8000e64 <checkerror>
 80011c2:	2803      	cmp	r0, #3
 80011c4:	dd02      	ble.n	80011cc <_get_semihosting_exts+0x44>
 80011c6:	3803      	subs	r0, #3
 80011c8:	42a8      	cmp	r0, r5
 80011ca:	dc08      	bgt.n	80011de <_get_semihosting_exts+0x56>
 80011cc:	4620      	mov	r0, r4
 80011ce:	f7ff ff0f 	bl	8000ff0 <_close>
 80011d2:	f04f 34ff 	mov.w	r4, #4294967295
 80011d6:	4620      	mov	r0, r4
 80011d8:	b003      	add	sp, #12
 80011da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011de:	2204      	movs	r2, #4
 80011e0:	4620      	mov	r0, r4
 80011e2:	eb0d 0102 	add.w	r1, sp, r2
 80011e6:	f7ff fe6b 	bl	8000ec0 <_read>
 80011ea:	2803      	cmp	r0, #3
 80011ec:	ddee      	ble.n	80011cc <_get_semihosting_exts+0x44>
 80011ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80011f2:	2b53      	cmp	r3, #83	; 0x53
 80011f4:	d1ea      	bne.n	80011cc <_get_semihosting_exts+0x44>
 80011f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80011fa:	2b48      	cmp	r3, #72	; 0x48
 80011fc:	d1e6      	bne.n	80011cc <_get_semihosting_exts+0x44>
 80011fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001202:	2b46      	cmp	r3, #70	; 0x46
 8001204:	d1e2      	bne.n	80011cc <_get_semihosting_exts+0x44>
 8001206:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800120a:	2b42      	cmp	r3, #66	; 0x42
 800120c:	d1de      	bne.n	80011cc <_get_semihosting_exts+0x44>
 800120e:	2201      	movs	r2, #1
 8001210:	4641      	mov	r1, r8
 8001212:	4620      	mov	r0, r4
 8001214:	f7ff fe6e 	bl	8000ef4 <_swilseek>
 8001218:	2800      	cmp	r0, #0
 800121a:	dbd7      	blt.n	80011cc <_get_semihosting_exts+0x44>
 800121c:	462a      	mov	r2, r5
 800121e:	4639      	mov	r1, r7
 8001220:	4620      	mov	r0, r4
 8001222:	f7ff fe4d 	bl	8000ec0 <_read>
 8001226:	4605      	mov	r5, r0
 8001228:	4620      	mov	r0, r4
 800122a:	f7ff fee1 	bl	8000ff0 <_close>
 800122e:	4628      	mov	r0, r5
 8001230:	f7ff fe18 	bl	8000e64 <checkerror>
 8001234:	4604      	mov	r4, r0
 8001236:	e7ce      	b.n	80011d6 <_get_semihosting_exts+0x4e>
 8001238:	08001488 	.word	0x08001488

0800123c <initialise_semihosting_exts>:
 800123c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800123e:	2100      	movs	r1, #0
 8001240:	2201      	movs	r2, #1
 8001242:	4d09      	ldr	r5, [pc, #36]	; (8001268 <initialise_semihosting_exts+0x2c>)
 8001244:	4c09      	ldr	r4, [pc, #36]	; (800126c <initialise_semihosting_exts+0x30>)
 8001246:	a801      	add	r0, sp, #4
 8001248:	6029      	str	r1, [r5, #0]
 800124a:	6022      	str	r2, [r4, #0]
 800124c:	f7ff ff9c 	bl	8001188 <_get_semihosting_exts>
 8001250:	2800      	cmp	r0, #0
 8001252:	dd07      	ble.n	8001264 <initialise_semihosting_exts+0x28>
 8001254:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001258:	f003 0201 	and.w	r2, r3, #1
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	602a      	str	r2, [r5, #0]
 8001262:	6023      	str	r3, [r4, #0]
 8001264:	b003      	add	sp, #12
 8001266:	bd30      	pop	{r4, r5, pc}
 8001268:	20000074 	.word	0x20000074
 800126c:	20000078 	.word	0x20000078

08001270 <_has_ext_stdout_stderr>:
 8001270:	b510      	push	{r4, lr}
 8001272:	4c04      	ldr	r4, [pc, #16]	; (8001284 <_has_ext_stdout_stderr+0x14>)
 8001274:	6822      	ldr	r2, [r4, #0]
 8001276:	2a00      	cmp	r2, #0
 8001278:	da01      	bge.n	800127e <_has_ext_stdout_stderr+0xe>
 800127a:	f7ff ffdf 	bl	800123c <initialise_semihosting_exts>
 800127e:	6820      	ldr	r0, [r4, #0]
 8001280:	bd10      	pop	{r4, pc}
 8001282:	bf00      	nop
 8001284:	20000078 	.word	0x20000078

08001288 <initialise_monitor_handles>:
 8001288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800128c:	2303      	movs	r3, #3
 800128e:	2400      	movs	r4, #0
 8001290:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8001340 <initialise_monitor_handles+0xb8>
 8001294:	b085      	sub	sp, #20
 8001296:	f8cd 9004 	str.w	r9, [sp, #4]
 800129a:	f10d 0804 	add.w	r8, sp, #4
 800129e:	9303      	str	r3, [sp, #12]
 80012a0:	2501      	movs	r5, #1
 80012a2:	9402      	str	r4, [sp, #8]
 80012a4:	4628      	mov	r0, r5
 80012a6:	4641      	mov	r1, r8
 80012a8:	beab      	bkpt	0x00ab
 80012aa:	4605      	mov	r5, r0
 80012ac:	4a20      	ldr	r2, [pc, #128]	; (8001330 <initialise_monitor_handles+0xa8>)
 80012ae:	4623      	mov	r3, r4
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295
 80012b4:	4614      	mov	r4, r2
 80012b6:	4e1f      	ldr	r6, [pc, #124]	; (8001334 <initialise_monitor_handles+0xac>)
 80012b8:	6035      	str	r5, [r6, #0]
 80012ba:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80012be:	3301      	adds	r3, #1
 80012c0:	2b14      	cmp	r3, #20
 80012c2:	d1fa      	bne.n	80012ba <initialise_monitor_handles+0x32>
 80012c4:	f7ff ffd4 	bl	8001270 <_has_ext_stdout_stderr>
 80012c8:	4d1b      	ldr	r5, [pc, #108]	; (8001338 <initialise_monitor_handles+0xb0>)
 80012ca:	b1d0      	cbz	r0, 8001302 <initialise_monitor_handles+0x7a>
 80012cc:	f04f 0a03 	mov.w	sl, #3
 80012d0:	2304      	movs	r3, #4
 80012d2:	f8cd 9004 	str.w	r9, [sp, #4]
 80012d6:	2701      	movs	r7, #1
 80012d8:	f8cd a00c 	str.w	sl, [sp, #12]
 80012dc:	9302      	str	r3, [sp, #8]
 80012de:	4638      	mov	r0, r7
 80012e0:	4641      	mov	r1, r8
 80012e2:	beab      	bkpt	0x00ab
 80012e4:	4683      	mov	fp, r0
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <initialise_monitor_handles+0xb4>)
 80012e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80012ec:	f8c3 b000 	str.w	fp, [r3]
 80012f0:	2308      	movs	r3, #8
 80012f2:	f8cd a00c 	str.w	sl, [sp, #12]
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	4638      	mov	r0, r7
 80012fa:	4641      	mov	r1, r8
 80012fc:	beab      	bkpt	0x00ab
 80012fe:	4607      	mov	r7, r0
 8001300:	602f      	str	r7, [r5, #0]
 8001302:	682b      	ldr	r3, [r5, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	bf02      	ittt	eq
 8001308:	4b0c      	ldreq	r3, [pc, #48]	; (800133c <initialise_monitor_handles+0xb4>)
 800130a:	681b      	ldreq	r3, [r3, #0]
 800130c:	602b      	streq	r3, [r5, #0]
 800130e:	6833      	ldr	r3, [r6, #0]
 8001310:	2600      	movs	r6, #0
 8001312:	6023      	str	r3, [r4, #0]
 8001314:	6066      	str	r6, [r4, #4]
 8001316:	f7ff ffab 	bl	8001270 <_has_ext_stdout_stderr>
 800131a:	b130      	cbz	r0, 800132a <initialise_monitor_handles+0xa2>
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <initialise_monitor_handles+0xb4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8001324:	682b      	ldr	r3, [r5, #0]
 8001326:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800132a:	b005      	add	sp, #20
 800132c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001330:	200000b4 	.word	0x200000b4
 8001334:	200000ac 	.word	0x200000ac
 8001338:	200000a8 	.word	0x200000a8
 800133c:	200000b0 	.word	0x200000b0
 8001340:	0800149e 	.word	0x0800149e

08001344 <_isatty>:
 8001344:	b570      	push	{r4, r5, r6, lr}
 8001346:	f7ff fd73 	bl	8000e30 <findslot>
 800134a:	2509      	movs	r5, #9
 800134c:	4604      	mov	r4, r0
 800134e:	b920      	cbnz	r0, 800135a <_isatty+0x16>
 8001350:	f7ff f8d6 	bl	8000500 <__errno>
 8001354:	6005      	str	r5, [r0, #0]
 8001356:	4620      	mov	r0, r4
 8001358:	bd70      	pop	{r4, r5, r6, pc}
 800135a:	4628      	mov	r0, r5
 800135c:	4621      	mov	r1, r4
 800135e:	beab      	bkpt	0x00ab
 8001360:	4604      	mov	r4, r0
 8001362:	2c01      	cmp	r4, #1
 8001364:	d0f7      	beq.n	8001356 <_isatty+0x12>
 8001366:	f7ff f8cb 	bl	8000500 <__errno>
 800136a:	2400      	movs	r4, #0
 800136c:	4606      	mov	r6, r0
 800136e:	2513      	movs	r5, #19
 8001370:	4628      	mov	r0, r5
 8001372:	4621      	mov	r1, r4
 8001374:	beab      	bkpt	0x00ab
 8001376:	4605      	mov	r5, r0
 8001378:	6035      	str	r5, [r6, #0]
 800137a:	e7ec      	b.n	8001356 <_isatty+0x12>

0800137c <_init>:
 800137c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800137e:	bf00      	nop
 8001380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001382:	bc08      	pop	{r3}
 8001384:	469e      	mov	lr, r3
 8001386:	4770      	bx	lr

08001388 <_fini>:
 8001388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800138a:	bf00      	nop
 800138c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800138e:	bc08      	pop	{r3}
 8001390:	469e      	mov	lr, r3
 8001392:	4770      	bx	lr
